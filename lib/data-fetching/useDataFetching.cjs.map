{"version":3,"file":"useDataFetching.cjs","sources":["../../src/data-fetching/useDataFetching.ts"],"sourcesContent":["/**\r\n * 数据预取组合式API\r\n * @module useDataFetching\r\n */\r\n\r\nimport type {\r\n  ComputedRef,\r\n  Ref,\r\n  WatchStopHandle\r\n} from 'vue';\nimport type { RouteLocationNormalizedLoaded } from '../types'\r\nimport type {\r\n  DataFetchConfig, \r\n  DataFetchingManager, \r\n  DataFetchState} from './DataFetchingManager';\r\nimport { \r\n  computed, \r\n  inject, \r\n  onMounted, \r\n  onUnmounted, \r\n  ref, \r\n  watch\r\n} from 'vue'\r\nimport { useRoute } from '../composables'\nimport {\r\n  DATA_FETCHING_KEY \r\n} from './DataFetchingManager'\r\n\r\n/**\r\n * 数据预取钩子选项\r\n */\r\nexport interface UseDataFetchingOptions extends Partial<DataFetchConfig> {\r\n  /** 是否立即获取 */\r\n  immediate?: boolean\r\n  /** 是否监听路由变化 */\r\n  watchRoute?: boolean\r\n  /** 是否监听查询参数变化 */\r\n  watchQuery?: boolean\r\n  /** 是否监听路径参数变化 */\r\n  watchParams?: boolean\r\n  /** 自定义参数 */\r\n  params?: Record<string, any>\r\n  /** 转换函数 */\r\n  transform?: (data: any) => any\r\n  /** 默认值 */\r\n  defaultValue?: any\r\n  /** 是否保持之前的数据 */\r\n  keepPreviousData?: boolean\r\n}\r\n\r\n/**\r\n * 数据预取返回值\r\n */\r\nexport interface UseDataFetchingReturn<T = any> {\r\n  /** 数据 */\r\n  data: Ref<T | null>\r\n  /** 是否加载中 */\r\n  loading: Ref<boolean>\r\n  /** 错误信息 */\r\n  error: Ref<Error | null>\r\n  /** 是否从缓存加载 */\r\n  fromCache: Ref<boolean>\r\n  /** 刷新数据 */\r\n  refresh: () => Promise<void>\r\n  /** 清除缓存 */\r\n  clearCache: () => void\r\n  /** 预获取 */\r\n  prefetch: (route?: RouteLocationNormalizedLoaded) => Promise<void>\r\n  /** 获取状态 */\r\n  getState: () => DataFetchState | undefined\r\n  /** 是否准备就绪 */\r\n  isReady: ComputedRef<boolean>\r\n  /** 是否有错误 */\r\n  hasError: ComputedRef<boolean>\r\n  /** 是否为空 */\r\n  isEmpty: ComputedRef<boolean>\r\n}\r\n\r\n/**\r\n * 使用数据预取\r\n */\r\nexport function useDataFetching<T = any>(\r\n  key: string,\r\n  fetcher: (route: RouteLocationNormalizedLoaded, params?: Record<string, any>) => Promise<T>,\r\n  options: UseDataFetchingOptions = {}\r\n): UseDataFetchingReturn<T> {\r\n  const route = useRoute()\r\n  const manager = inject<DataFetchingManager>(DATA_FETCHING_KEY)\r\n\r\n  if (!manager) {\r\n    throw new Error('DataFetchingManager not found. Did you forget to install the plugin?')\r\n  }\r\n\r\n  // 响应式状态\r\n  const data = ref<T | null>(options.defaultValue ?? null)\r\n  const loading = ref(false)\r\n  const error = ref<Error | null>(null)\r\n  const fromCache = ref(false)\r\n  const previousData = ref<T | null>(null)\r\n\r\n  // 计算属性\r\n  const isReady = computed(() => !loading.value && !error.value && data.value !== null)\r\n  const hasError = computed(() => error.value !== null)\r\n  const isEmpty = computed(() => {\r\n    if (data.value === null || data.value === undefined) {\r\n      return true\r\n    }\r\n    if (Array.isArray(data.value)) {\r\n      return data.value.length === 0\r\n    }\r\n    if (typeof data.value === 'object') {\r\n      return Object.keys(data.value).length === 0\r\n    }\r\n    return false\r\n  })\r\n\r\n  // 注册数据获取配置\r\n  const registerConfig = () => {\r\n    const config: DataFetchConfig = {\r\n      fetcher: async (route, params) => {\r\n        const result = await fetcher(route as RouteLocationNormalizedLoaded, params)\r\n        return options.transform ? options.transform(result) : result\r\n      },\r\n      cacheKey: options.cacheKey,\r\n      cacheDuration: options.cacheDuration,\r\n      fetchOnClient: options.fetchOnClient,\r\n      fetchOnServer: options.fetchOnServer,\r\n      retryCount: options.retryCount,\r\n      retryDelay: options.retryDelay,\r\n      timeout: options.timeout,\r\n      parallel: options.parallel,\r\n      dependencies: options.dependencies,\r\n      onError: (err, route) => {\r\n        error.value = err\r\n        if (options.onError) {\r\n          options.onError(err, route)\r\n        }\r\n      },\r\n      onSuccess: (result, route) => {\r\n        // 保存之前的数据\r\n        if (options.keepPreviousData && data.value !== null) {\r\n          previousData.value = data.value\r\n        }\r\n        \r\n        data.value = result\r\n        error.value = null\r\n        \r\n        if (options.onSuccess) {\r\n          options.onSuccess(result, route)\r\n        }\r\n      }\r\n    }\r\n\r\n    manager.register(key, config)\r\n  }\r\n\r\n  // 获取数据\r\n  const fetchData = async (customRoute?: RouteLocationNormalizedLoaded) => {\r\n    const targetRoute = customRoute || route\r\n    loading.value = true\r\n    error.value = null\r\n\r\n    try {\r\n      const result = await manager.fetch<T>(key, targetRoute, options.params)\r\n      \r\n      // 获取状态\r\n      const state = manager.getState(key)\r\n      if (state) {\r\n        fromCache.value = state.fromCache\r\n      }\r\n\r\n      // 应用转换\r\n      if (options.transform) {\r\n        data.value = options.transform(result)\r\n      } else {\r\n        data.value = result\r\n      }\r\n    } catch (err) {\r\n      error.value = err as Error\r\n      \r\n      // 如果启用了保持之前的数据，恢复\r\n      if (options.keepPreviousData && previousData.value !== null) {\r\n        data.value = previousData.value\r\n      }\r\n    } finally {\r\n      loading.value = false\r\n    }\r\n  }\r\n\r\n  // 刷新数据\r\n  const refresh = async () => {\r\n    await manager.refresh(key, route, options.params)\r\n    await fetchData()\r\n  }\r\n\r\n  // 清除缓存\r\n  const clearCache = () => {\r\n    manager.clearCache(key)\r\n  }\r\n\r\n  // 预获取\r\n  const prefetch = async (customRoute?: RouteLocationNormalizedLoaded) => {\r\n    const targetRoute = customRoute || route\r\n    await manager.prefetch(key, targetRoute, options.params)\r\n  }\r\n\r\n  // 获取状态\r\n  const getState = () => {\r\n    return manager.getState(key)\r\n  }\r\n\r\n  // 监听器列表\r\n  const watchers: WatchStopHandle[] = []\r\n\r\n  // 设置监听器\r\n  const setupWatchers = () => {\r\n    // 监听路由变化\r\n    if (options.watchRoute !== false) {\r\n      const routeWatcher = watch(\r\n        () => route.path,\r\n        () => {\r\n          fetchData()\r\n        }\r\n      )\r\n      watchers.push(routeWatcher)\r\n    }\r\n\r\n    // 监听查询参数变化\r\n    if (options.watchQuery) {\r\n      const queryWatcher = watch(\r\n        () => route.query,\r\n        () => {\r\n          fetchData()\r\n        },\r\n        { deep: true }\r\n      )\r\n      watchers.push(queryWatcher)\r\n    }\r\n\r\n    // 监听路径参数变化\r\n    if (options.watchParams) {\r\n      const paramsWatcher = watch(\r\n        () => route.params,\r\n        () => {\r\n          fetchData()\r\n        },\r\n        { deep: true }\r\n      )\r\n      watchers.push(paramsWatcher)\r\n    }\r\n\r\n    // 监听自定义参数变化\r\n    if (options.params) {\r\n      const customParamsWatcher = watch(\r\n        () => options.params,\r\n        () => {\r\n          fetchData()\r\n        },\r\n        { deep: true }\r\n      )\r\n      watchers.push(customParamsWatcher)\r\n    }\r\n  }\r\n\r\n  // 组件挂载时\r\n  onMounted(() => {\r\n    registerConfig()\r\n    \r\n    if (options.immediate !== false) {\r\n      fetchData()\r\n    }\r\n\r\n    setupWatchers()\r\n  })\r\n\r\n  // 组件卸载时\r\n  onUnmounted(() => {\r\n    // 停止所有监听器\r\n    watchers.forEach(stop => stop())\r\n  })\r\n\r\n  return {\r\n    data,\r\n    loading,\r\n    error,\r\n    fromCache,\r\n    refresh,\r\n    clearCache,\r\n    prefetch,\r\n    getState,\r\n    isReady,\r\n    hasError,\r\n    isEmpty\r\n  }\r\n}\r\n\r\n/**\r\n * 使用多个数据预取\r\n */\r\nexport function useMultipleDataFetching(\r\n  configs: Record<string, {\r\n    fetcher: (route: RouteLocationNormalizedLoaded, params?: Record<string, any>) => Promise<any>\r\n    options?: UseDataFetchingOptions\r\n  }>\r\n): Record<string, UseDataFetchingReturn> {\r\n  const results: Record<string, UseDataFetchingReturn> = {}\r\n\r\n  Object.entries(configs).forEach(([key, config]) => {\r\n    results[key] = useDataFetching(key, config.fetcher, config.options || {})\r\n  })\r\n\r\n  return results\r\n}\r\n\r\n/**\r\n * 使用延迟数据预取\r\n */\r\nexport function useLazyDataFetching<T = any>(\r\n  key: string,\r\n  fetcher: (route: RouteLocationNormalizedLoaded, params?: Record<string, any>) => Promise<T>,\r\n  options: UseDataFetchingOptions = {}\r\n): UseDataFetchingReturn<T> & { execute: () => Promise<void> } {\r\n  const result = useDataFetching(key, fetcher, {\r\n    ...options,\r\n    immediate: false\r\n  })\r\n\r\n  const execute = async () => {\r\n    await result.refresh()\r\n  }\r\n\r\n  return {\r\n    ...result,\r\n    execute\r\n  }\r\n}\r\n\r\n/**\r\n * 使用分页数据预取\r\n */\r\nexport interface UsePaginatedDataFetchingOptions extends UseDataFetchingOptions {\r\n  /** 初始页码 */\r\n  initialPage?: number\r\n  /** 每页数量 */\r\n  pageSize?: number\r\n  /** 总数字段名 */\r\n  totalField?: string\r\n  /** 数据字段名 */\r\n  dataField?: string\r\n}\r\n\r\nexport function usePaginatedDataFetching<T = any>(\r\n  key: string,\r\n  fetcher: (route: RouteLocationNormalizedLoaded, params?: Record<string, any>) => Promise<{\r\n    data: T[]\r\n    total: number\r\n    page: number\r\n    pageSize: number\r\n  }>,\r\n  options: UsePaginatedDataFetchingOptions = {}\r\n): UseDataFetchingReturn<T[]> & {\r\n  /** 当前页码 */\r\n  page: Ref<number>\r\n  /** 每页数量 */\r\n  pageSize: Ref<number>\r\n  /** 总数 */\r\n  total: Ref<number>\r\n  /** 总页数 */\r\n  totalPages: ComputedRef<number>\r\n  /** 是否有下一页 */\r\n  hasNextPage: ComputedRef<boolean>\r\n  /** 是否有上一页 */\r\n  hasPreviousPage: ComputedRef<boolean>\r\n  /** 下一页 */\r\n  nextPage: () => Promise<void>\r\n  /** 上一页 */\r\n  previousPage: () => Promise<void>\r\n  /** 跳转到页 */\r\n  goToPage: (page: number) => Promise<void>\r\n  /** 设置每页数量 */\r\n  setPageSize: (size: number) => Promise<void>\r\n} {\r\n  const page = ref(options.initialPage || 1)\r\n  const pageSize = ref(options.pageSize || 20)\r\n  const total = ref(0)\r\n\r\n  const totalPages = computed(() => Math.ceil(total.value / pageSize.value))\r\n  const hasNextPage = computed(() => page.value < totalPages.value)\r\n  const hasPreviousPage = computed(() => page.value > 1)\r\n\r\n  const paginatedFetcher = async (route: RouteLocationNormalizedLoaded, params?: Record<string, any>) => {\r\n    const result = await fetcher(route, {\r\n      ...params,\r\n      page: page.value,\r\n      pageSize: pageSize.value\r\n    })\r\n\r\n    total.value = result.total\r\n    return result.data\r\n  }\r\n\r\n  const result = useDataFetching<T[]>(key, paginatedFetcher, options)\r\n\r\n  const nextPage = async () => {\r\n    if (hasNextPage.value) {\r\n      page.value++\r\n      await result.refresh()\r\n    }\r\n  }\r\n\r\n  const previousPage = async () => {\r\n    if (hasPreviousPage.value) {\r\n      page.value--\r\n      await result.refresh()\r\n    }\r\n  }\r\n\r\n  const goToPage = async (targetPage: number) => {\r\n    if (targetPage >= 1 && targetPage <= totalPages.value) {\r\n      page.value = targetPage\r\n      await result.refresh()\r\n    }\r\n  }\r\n\r\n  const setPageSize = async (size: number) => {\r\n    pageSize.value = size\r\n    page.value = 1\r\n    await result.refresh()\r\n  }\r\n\r\n  return {\r\n    ...result,\r\n    page,\r\n    pageSize,\r\n    total,\r\n    totalPages,\r\n    hasNextPage,\r\n    hasPreviousPage,\r\n    nextPage,\r\n    previousPage,\r\n    goToPage,\r\n    setPageSize\r\n  }\r\n}\r\n\r\n/**\r\n * 使用无限滚动数据预取\r\n */\r\nexport interface UseInfiniteDataFetchingOptions extends UseDataFetchingOptions {\r\n  /** 初始页码 */\r\n  initialPage?: number\r\n  /** 每页数量 */\r\n  pageSize?: number\r\n  /** 是否反向（从底部加载） */\r\n  reverse?: boolean\r\n}\r\n\r\nexport function useInfiniteDataFetching<T = any>(\r\n  key: string,\r\n  fetcher: (route: RouteLocationNormalizedLoaded, params?: Record<string, any>) => Promise<{\r\n    data: T[]\r\n    hasMore: boolean\r\n    nextCursor?: string | number\r\n  }>,\r\n  options: UseInfiniteDataFetchingOptions = {}\r\n): UseDataFetchingReturn<T[]> & {\r\n  /** 加载更多 */\r\n  loadMore: () => Promise<void>\r\n  /** 是否有更多 */\r\n  hasMore: Ref<boolean>\r\n  /** 是否加载中 */\r\n  loadingMore: Ref<boolean>\r\n  /** 重置 */\r\n  reset: () => Promise<void>\r\n  /** 所有项目 */\r\n  items: Ref<T[]>\r\n} {\r\n  const items = ref<T[]>([])\r\n  const hasMore = ref(true)\r\n  const loadingMore = ref(false)\r\n  const nextCursor = ref<string | number | undefined>()\r\n\r\n  const infiniteFetcher = async (route: RouteLocationNormalizedLoaded, params?: Record<string, any>) => {\r\n    const result = await fetcher(route, {\r\n      ...params,\r\n      cursor: nextCursor.value\r\n    })\r\n\r\n    hasMore.value = result.hasMore\r\n    nextCursor.value = result.nextCursor\r\n\r\n    if (options.reverse) {\r\n      items.value = [...result.data, ...items.value]\r\n    } else {\r\n      items.value = [...items.value, ...result.data]\r\n    }\r\n\r\n    return items.value\r\n  }\r\n\r\n  const result = useDataFetching<T[]>(key, infiniteFetcher, {\r\n    ...options,\r\n    defaultValue: []\r\n  })\r\n\r\n  const loadMore = async () => {\r\n    if (!hasMore.value || loadingMore.value) {\r\n      return\r\n    }\r\n\r\n    loadingMore.value = true\r\n    try {\r\n      await result.refresh()\r\n    } finally {\r\n      loadingMore.value = false\r\n    }\r\n  }\r\n\r\n  const reset = async () => {\r\n    items.value = []\r\n    hasMore.value = true\r\n    nextCursor.value = undefined\r\n    await result.refresh()\r\n  }\r\n\r\n  return {\r\n    ...result,\r\n    loadMore,\r\n    hasMore,\r\n    loadingMore,\r\n    reset,\r\n    items: computed(() => items.value)\r\n  }\r\n}"],"names":["useDataFetching","key","fetcher","options","route","useRoute","manager","inject","DATA_FETCHING_KEY","Error","data","ref","defaultValue","loading","error","fromCache","previousData","isReady","computed","value","hasError","isEmpty","undefined","Array","isArray","length","Object","keys","registerConfig","config","params","result","transform","cacheKey","cacheDuration","fetchOnClient","fetchOnServer","retryCount","retryDelay","timeout","parallel","dependencies","onError","err","onSuccess","keepPreviousData","register","fetchData","customRoute","targetRoute","fetch","state","getState","refresh","clearCache","prefetch","watchers","setupWatchers","watchRoute","routeWatcher","watch","path","push","watchQuery","queryWatcher","query","deep","watchParams","paramsWatcher","customParamsWatcher","onMounted","immediate","onUnmounted","forEach","stop","useMultipleDataFetching","configs","results","entries","useLazyDataFetching","execute","usePaginatedDataFetching","page","initialPage","pageSize","total","totalPages","Math","ceil","hasNextPage","hasPreviousPage","paginatedFetcher","nextPage","previousPage","goToPage","targetPage","setPageSize","size","useInfiniteDataFetching","items","hasMore","loadingMore","nextCursor","infiniteFetcher","cursor","reverse","loadMore","reset"],"mappings":";;;;;;;;;;;;;;;AAiFO,SAASA,eAAAA,CACdC,GAAAA,EACAC,OAAAA,EACAC,OAAAA,GAAkC,EAAC,EACT;AAC1B,EAAA,MAAMC,QAAQC,cAAAA,EAAS;AACvB,EAAA,MAAMC,OAAAA,GAAUC,WAA4BC,qCAAiB,CAAA;AAE7D,EAAA,IAAI,CAACF,OAAAA,EAAS;AACZ,IAAA,MAAM,IAAIG,MAAM,sEAAsE,CAAA;AAAA,EACxF;AAGA,EAAA,MAAMC,IAAAA,GAAOC,OAAAA,CAAcR,OAAAA,CAAQS,YAAAA,IAAgB,IAAI,CAAA;AACvD,EAAA,MAAMC,OAAAA,GAAUF,QAAI,KAAK,CAAA;AACzB,EAAA,MAAMG,KAAAA,GAAQH,QAAkB,IAAI,CAAA;AACpC,EAAA,MAAMI,SAAAA,GAAYJ,QAAI,KAAK,CAAA;AAC3B,EAAA,MAAMK,YAAAA,GAAeL,QAAc,IAAI,CAAA;AAGvC,EAAA,MAAMM,OAAAA,GAAUC,YAAAA,CAAS,MAAM,CAACL,OAAAA,CAAQM,KAAAA,IAAS,CAACL,KAAAA,CAAMK,KAAAA,IAAST,IAAAA,CAAKS,KAAAA,KAAU,IAAI,CAAA;AACpF,EAAA,MAAMC,QAAAA,GAAWF,YAAAA,CAAS,MAAMJ,KAAAA,CAAMK,UAAU,IAAI,CAAA;AACpD,EAAA,MAAME,OAAAA,GAAUH,aAAS,MAAM;AAC7B,IAAA,IAAIR,IAAAA,CAAKS,KAAAA,KAAU,IAAA,IAAQT,IAAAA,CAAKS,UAAUG,MAAAA,EAAW;AACnD,MAAA,OAAO,IAAA;AAAA,IACT;AACA,IAAA,IAAIC,KAAAA,CAAMC,OAAAA,CAAQd,IAAAA,CAAKS,KAAK,CAAA,EAAG;AAC7B,MAAA,OAAOT,IAAAA,CAAKS,MAAMM,MAAAA,KAAW,CAAA;AAAA,IAC/B;AACA,IAAA,IAAI,OAAOf,IAAAA,CAAKS,KAAAA,KAAU,QAAA,EAAU;AAClC,MAAA,OAAOO,MAAAA,CAAOC,IAAAA,CAAKjB,IAAAA,CAAKS,KAAK,EAAEM,MAAAA,KAAW,CAAA;AAAA,IAC5C;AACA,IAAA,OAAO,KAAA;AAAA,EACT,CAAC,CAAA;AAGD,EAAA,MAAMG,iBAAiBA,MAAM;AAC3B,IAAA,MAAMC,MAAAA,GAA0B;AAAA,MAC9B3B,OAAAA,EAAS,OAAOE,MAAAA,EAAO0B,MAAAA,KAAW;AAChC,QAAA,MAAMC,MAAAA,GAAS,MAAM7B,OAAAA,CAAQE,MAAAA,EAAwC0B,MAAM,CAAA;AAC3E,QAAA,OAAO3B,OAAAA,CAAQ6B,SAAAA,GAAY7B,OAAAA,CAAQ6B,SAAAA,CAAUD,MAAM,CAAA,GAAIA,MAAAA;AAAAA,MACzD,CAAA;AAAA,MACAE,UAAU9B,OAAAA,CAAQ8B,QAAAA;AAAAA,MAClBC,eAAe/B,OAAAA,CAAQ+B,aAAAA;AAAAA,MACvBC,eAAehC,OAAAA,CAAQgC,aAAAA;AAAAA,MACvBC,eAAejC,OAAAA,CAAQiC,aAAAA;AAAAA,MACvBC,YAAYlC,OAAAA,CAAQkC,UAAAA;AAAAA,MACpBC,YAAYnC,OAAAA,CAAQmC,UAAAA;AAAAA,MACpBC,SAASpC,OAAAA,CAAQoC,OAAAA;AAAAA,MACjBC,UAAUrC,OAAAA,CAAQqC,QAAAA;AAAAA,MAClBC,cAActC,OAAAA,CAAQsC,YAAAA;AAAAA,MACtBC,OAAAA,EAASA,CAACC,GAAAA,EAAKvC,MAAAA,KAAU;AACvBU,QAAAA,KAAAA,CAAMK,KAAAA,GAAQwB,GAAAA;AACd,QAAA,IAAIxC,QAAQuC,OAAAA,EAAS;AACnBvC,UAAAA,OAAAA,CAAQuC,OAAAA,CAAQC,KAAKvC,MAAK,CAAA;AAAA,QAC5B;AAAA,MACF,CAAA;AAAA,MACAwC,SAAAA,EAAWA,CAACb,MAAAA,EAAQ3B,MAAAA,KAAU;AAE5B,QAAA,IAAID,OAAAA,CAAQ0C,gBAAAA,IAAoBnC,IAAAA,CAAKS,KAAAA,KAAU,IAAA,EAAM;AACnDH,UAAAA,YAAAA,CAAaG,QAAQT,IAAAA,CAAKS,KAAAA;AAAAA,QAC5B;AAEAT,QAAAA,IAAAA,CAAKS,KAAAA,GAAQY,MAAAA;AACbjB,QAAAA,KAAAA,CAAMK,KAAAA,GAAQ,IAAA;AAEd,QAAA,IAAIhB,QAAQyC,SAAAA,EAAW;AACrBzC,UAAAA,OAAAA,CAAQyC,SAAAA,CAAUb,QAAQ3B,MAAK,CAAA;AAAA,QACjC;AAAA,MACF;AAAA,KACF;AAEAE,IAAAA,OAAAA,CAAQwC,QAAAA,CAAS7C,KAAK4B,MAAM,CAAA;AAAA,EAC9B,CAAA;AAGA,EAAA,MAAMkB,SAAAA,GAAY,OAAOC,WAAAA,KAAgD;AACvE,IAAA,MAAMC,cAA6B7C,KAAAA;AACnCS,IAAAA,OAAAA,CAAQM,KAAAA,GAAQ,IAAA;AAChBL,IAAAA,KAAAA,CAAMK,KAAAA,GAAQ,IAAA;AAEd,IAAA,IAAI;AACF,MAAA,MAAMY,SAAS,MAAMzB,OAAAA,CAAQ4C,MAASjD,GAAAA,EAAKgD,WAAAA,EAAa9C,QAAQ2B,MAAM,CAAA;AAGtE,MAAA,MAAMqB,KAAAA,GAAQ7C,OAAAA,CAAQ8C,QAAAA,CAASnD,GAAG,CAAA;AAClC,MAAA,IAAIkD,KAAAA,EAAO;AACTpC,QAAAA,SAAAA,CAAUI,QAAQgC,KAAAA,CAAMpC,SAAAA;AAAAA,MAC1B;AAGA,MAAA,IAAIZ,QAAQ6B,SAAAA,EAAW;AACrBtB,QAAAA,IAAAA,CAAKS,KAAAA,GAAQhB,OAAAA,CAAQ6B,SAAAA,CAAUD,MAAM,CAAA;AAAA,MACvC,CAAA,MAAO;AACLrB,QAAAA,IAAAA,CAAKS,KAAAA,GAAQY,MAAAA;AAAAA,MACf;AAAA,IACF,SAASY,GAAAA,EAAK;AACZ7B,MAAAA,KAAAA,CAAMK,KAAAA,GAAQwB,GAAAA;AAGd,MAAA,IAAIxC,OAAAA,CAAQ0C,gBAAAA,IAAoB7B,YAAAA,CAAaG,KAAAA,KAAU,IAAA,EAAM;AAC3DT,QAAAA,IAAAA,CAAKS,QAAQH,YAAAA,CAAaG,KAAAA;AAAAA,MAC5B;AAAA,IACF,CAAA,SAAC;AACCN,MAAAA,OAAAA,CAAQM,KAAAA,GAAQ,KAAA;AAAA,IAClB;AAAA,EACF,CAAA;AAGA,EAAA,MAAMkC,UAAU,YAAY;AAC1B,IAAA,MAAM/C,OAAAA,CAAQ+C,OAAAA,CAAQpD,GAAAA,EAAKG,KAAAA,EAAOD,QAAQ2B,MAAM,CAAA;AAChD,IAAA,MAAMiB,SAAAA,EAAU;AAAA,EAClB,CAAA;AAGA,EAAA,MAAMO,aAAaA,MAAM;AACvBhD,IAAAA,OAAAA,CAAQgD,WAAWrD,GAAG,CAAA;AAAA,EACxB,CAAA;AAGA,EAAA,MAAMsD,QAAAA,GAAW,OAAOP,WAAAA,KAAgD;AACtE,IAAA,MAAMC,cAAcD,WAAAA,IAAe5C,KAAAA;AACnC,IAAA,MAAME,OAAAA,CAAQiD,QAAAA,CAAStD,GAAAA,EAAKgD,WAAAA,EAAa9C,QAAQ2B,MAAM,CAAA;AAAA,EACzD,CAAA;AAGA,EAAA,MAAMsB,WAAWA,MAAM;AACrB,IAAA,OAAO9C,OAAAA,CAAQ8C,SAASnD,GAAG,CAAA;AAAA,EAC7B,CAAA;AAGA,EAAA,MAAMuD,WAA8B,EAAA;AAGpC,EAAA,MAAMC,gBAAgBA,MAAM;AAE1B,IAAA,IAAItD,OAAAA,CAAQuD,eAAe,KAAA,EAAO;AAChC,MAAA,MAAMC,YAAAA,GAAeC,SAAAA,CACnB,MAAMxD,KAAAA,CAAMyD,MACZ,MAAM;AACJd,QAAAA,SAAAA,EAAU;AAAA,MACZ,CACF,CAAA;AACAS,MAAAA,QAAAA,CAASM,KAAKH,YAAY,CAAA;AAAA,IAC5B;AAGA,IAAA,IAAIxD,QAAQ4D,UAAAA,EAAY;AACtB,MAAA,MAAMC,YAAAA,GAAeJ,SAAAA,CACnB,MAAMxD,KAAAA,CAAM6D,OACZ,MAAM;AACJlB,QAAAA,SAAAA,EAAU;AAAA,MACZ,CAAA,EACA;AAAA,QAAEmB,IAAAA,EAAM;AAAA,OACV,CAAA;AACAV,MAAAA,QAAAA,CAASM,KAAKE,YAAY,CAAA;AAAA,IAC5B;AAGA,IAAA,IAAI7D,QAAQgE,WAAAA,EAAa;AACvB,MAAA,MAAMC,aAAAA,GAAgBR,SAAAA,CACpB,MAAMxD,KAAAA,CAAM0B,QACZ,MAAM;AACJiB,QAAAA,SAAAA,EAAU;AAAA,MACZ,CAAA,EACA;AAAA,QAAEmB,IAAAA,EAAM;AAAA,OACV,CAAA;AACAV,MAAAA,QAAAA,CAASM,KAAKM,aAAa,CAAA;AAAA,IAC7B;AAGA,IAAA,IAAIjE,QAAQ2B,MAAAA,EAAQ;AAClB,MAAA,MAAMuC,mBAAAA,GAAsBT,SAAAA,CAC1B,MAAMzD,OAAAA,CAAQ2B,QACd,MAAM;AACJiB,QAAAA,SAAAA,EAAU;AAAA,MACZ,CAAA,EACA;AAAA,QAAEmB,IAAAA,EAAM;AAAA,OACV,CAAA;AACAV,MAAAA,QAAAA,CAASM,KAAKO,mBAAmB,CAAA;AAAA,IACnC;AAAA,EACF,CAAA;AAGAC,EAAAA,aAAAA,CAAU,MAAM;AACd1C,IAAAA,cAAAA,EAAe;AAEf,IAAA,IAAIzB,OAAAA,CAAQoE,cAAc,KAAA,EAAO;AAC/BxB,MAAAA,SAAAA,EAAU;AAAA,IACZ;AAEAU,IAAAA,aAAAA,EAAc;AAAA,EAChB,CAAC,CAAA;AAGDe,EAAAA,eAAAA,CAAY,MAAM;AAEhBhB,IAAAA,QAAAA,CAASiB,OAAAA,CAAQC,CAAAA,IAAAA,KAAQA,IAAAA,EAAM,CAAA;AAAA,EACjC,CAAC,CAAA;AAED,EAAA,OAAO;AAAA,IACLhE,IAAAA;AAAAA,IACAG,OAAAA;AAAAA,IACAC,KAAAA;AAAAA,IACAC,SAAAA;AAAAA,IACAsC,OAAAA;AAAAA,IACAC,UAAAA;AAAAA,IACAC,QAAAA;AAAAA,IACAH,QAAAA;AAAAA,IACAnC,OAAAA;AAAAA,IACAG,QAAAA;AAAAA,IACAC;AAAAA,GACF;AACF;AAKO,SAASsD,wBACdC,OAAAA,EAIuC;AACvC,EAAA,MAAMC,UAAiD,EAAC;AAExDnD,EAAAA,MAAAA,CAAOoD,OAAAA,CAAQF,OAAO,CAAA,CAAEH,OAAAA,CAAQ,CAAC,CAACxE,GAAAA,EAAK4B,MAAM,CAAA,KAAM;AACjDgD,IAAAA,OAAAA,CAAQ5E,GAAG,IAAID,eAAAA,CAAgBC,GAAAA,EAAK4B,OAAO3B,OAAAA,EAAS2B,MAAAA,CAAO1B,OAAAA,IAAW,EAAE,CAAA;AAAA,EAC1E,CAAC,CAAA;AAED,EAAA,OAAO0E,OAAAA;AACT;AAKO,SAASE,mBAAAA,CACd9E,GAAAA,EACAC,OAAAA,EACAC,OAAAA,GAAkC,EAAC,EAC0B;AAC7D,EAAA,MAAM4B,MAAAA,GAAS/B,eAAAA,CAAgBC,GAAAA,EAAKC,OAAAA,EAAS;AAAA,IAC3C,GAAGC,OAAAA;AAAAA,IACHoE,SAAAA,EAAW;AAAA,GACZ,CAAA;AAED,EAAA,MAAMS,UAAU,YAAY;AAC1B,IAAA,MAAMjD,OAAOsB,OAAAA,EAAQ;AAAA,EACvB,CAAA;AAEA,EAAA,OAAO;AAAA,IACL,GAAGtB,MAAAA;AAAAA,IACHiD;AAAAA,GACF;AACF;AAgBO,SAASC,wBAAAA,CACdhF,GAAAA,EACAC,OAAAA,EAMAC,OAAAA,GAA2C,EAAC,EAsB5C;AACA,EAAA,MAAM+E,IAAAA,GAAOvE,OAAAA,CAAIR,OAAAA,CAAQgF,WAAAA,IAAe,CAAC,CAAA;AACzC,EAAA,MAAMC,QAAAA,GAAWzE,OAAAA,CAAIR,OAAAA,CAAQiF,QAAAA,IAAY,EAAE,CAAA;AAC3C,EAAA,MAAMC,KAAAA,GAAQ1E,QAAI,CAAC,CAAA;AAEnB,EAAA,MAAM2E,UAAAA,GAAapE,aAAS,MAAMqE,IAAAA,CAAKC,KAAKH,KAAAA,CAAMlE,KAAAA,GAAQiE,QAAAA,CAASjE,KAAK,CAAC,CAAA;AACzE,EAAA,MAAMsE,cAAcvE,YAAAA,CAAS,MAAMgE,IAAAA,CAAK/D,KAAAA,GAAQmE,WAAWnE,KAAK,CAAA;AAChE,EAAA,MAAMuE,eAAAA,GAAkBxE,YAAAA,CAAS,MAAMgE,IAAAA,CAAK/D,QAAQ,CAAC,CAAA;AAErD,EAAA,MAAMwE,gBAAAA,GAAmB,OAAOvF,KAAAA,EAAsC0B,MAAAA,KAAiC;AACrG,IAAA,MAAMC,OAAAA,GAAS,MAAM7B,OAAAA,CAAQE,KAAAA,EAAO;AAAA,MAClC,GAAG0B,MAAAA;AAAAA,MACHoD,MAAMA,IAAAA,CAAK/D,KAAAA;AAAAA,MACXiE,UAAUA,QAAAA,CAASjE;AAAAA,KACpB,CAAA;AAEDkE,IAAAA,KAAAA,CAAMlE,QAAQY,OAAAA,CAAOsD,KAAAA;AACrB,IAAA,OAAOtD,OAAAA,CAAOrB,IAAAA;AAAAA,EAChB,CAAA;AAEA,EAAA,MAAMqB,MAAAA,GAAS/B,eAAAA,CAAqBC,GAAAA,EAAK0F,gBAAAA,EAAkBxF,OAAO,CAAA;AAElE,EAAA,MAAMyF,WAAW,YAAY;AAC3B,IAAA,IAAIH,YAAYtE,KAAAA,EAAO;AACrB+D,MAAAA,IAAAA,CAAK/D,KAAAA,EAAAA;AACL,MAAA,MAAMY,OAAOsB,OAAAA,EAAQ;AAAA,IACvB;AAAA,EACF,CAAA;AAEA,EAAA,MAAMwC,eAAe,YAAY;AAC/B,IAAA,IAAIH,gBAAgBvE,KAAAA,EAAO;AACzB+D,MAAAA,IAAAA,CAAK/D,KAAAA,EAAAA;AACL,MAAA,MAAMY,OAAOsB,OAAAA,EAAQ;AAAA,IACvB;AAAA,EACF,CAAA;AAEA,EAAA,MAAMyC,QAAAA,GAAW,OAAOC,UAAAA,KAAuB;AAC7C,IAAA,IAAIA,UAAAA,IAAc,CAAA,IAAKA,UAAAA,IAAcT,UAAAA,CAAWnE,KAAAA,EAAO;AACrD+D,MAAAA,IAAAA,CAAK/D,KAAAA,GAAQ4E,UAAAA;AACb,MAAA,MAAMhE,OAAOsB,OAAAA,EAAQ;AAAA,IACvB;AAAA,EACF,CAAA;AAEA,EAAA,MAAM2C,WAAAA,GAAc,OAAOC,IAAAA,KAAiB;AAC1Cb,IAAAA,QAAAA,CAASjE,KAAAA,GAAQ8E,IAAAA;AACjBf,IAAAA,IAAAA,CAAK/D,KAAAA,GAAQ,CAAA;AACb,IAAA,MAAMY,OAAOsB,OAAAA,EAAQ;AAAA,EACvB,CAAA;AAEA,EAAA,OAAO;AAAA,IACL,GAAGtB,MAAAA;AAAAA,IACHmD,IAAAA;AAAAA,IACAE,QAAAA;AAAAA,IACAC,KAAAA;AAAAA,IACAC,UAAAA;AAAAA,IACAG,WAAAA;AAAAA,IACAC,eAAAA;AAAAA,IACAE,QAAAA;AAAAA,IACAC,YAAAA;AAAAA,IACAC,QAAAA;AAAAA,IACAE;AAAAA,GACF;AACF;AAcO,SAASE,uBAAAA,CACdjG,GAAAA,EACAC,OAAAA,EAKAC,OAAAA,GAA0C,EAAC,EAY3C;AACA,EAAA,MAAMgG,KAAAA,GAAQxF,OAAAA,CAAS,EAAE,CAAA;AACzB,EAAA,MAAMyF,OAAAA,GAAUzF,QAAI,IAAI,CAAA;AACxB,EAAA,MAAM0F,WAAAA,GAAc1F,QAAI,KAAK,CAAA;AAC7B,EAAA,MAAM2F,aAAa3F,OAAAA,EAAiC;AAEpD,EAAA,MAAM4F,eAAAA,GAAkB,OAAOnG,KAAAA,EAAsC0B,MAAAA,KAAiC;AACpG,IAAA,MAAMC,OAAAA,GAAS,MAAM7B,OAAAA,CAAQE,KAAAA,EAAO;AAAA,MAClC,GAAG0B,MAAAA;AAAAA,MACH0E,QAAQF,UAAAA,CAAWnF;AAAAA,KACpB,CAAA;AAEDiF,IAAAA,OAAAA,CAAQjF,QAAQY,OAAAA,CAAOqE,OAAAA;AACvBE,IAAAA,UAAAA,CAAWnF,QAAQY,OAAAA,CAAOuE,UAAAA;AAE1B,IAAA,IAAInG,QAAQsG,OAAAA,EAAS;AACnBN,MAAAA,KAAAA,CAAMhF,QAAQ,CAAC,GAAGY,QAAOrB,IAAAA,EAAM,GAAGyF,MAAMhF,KAAK,CAAA;AAAA,IAC/C,CAAA,MAAO;AACLgF,MAAAA,KAAAA,CAAMhF,QAAQ,CAAC,GAAGgF,MAAMhF,KAAAA,EAAO,GAAGY,QAAOrB,IAAI,CAAA;AAAA,IAC/C;AAEA,IAAA,OAAOyF,KAAAA,CAAMhF,KAAAA;AAAAA,EACf,CAAA;AAEA,EAAA,MAAMY,MAAAA,GAAS/B,eAAAA,CAAqBC,GAAAA,EAAKsG,eAAAA,EAAiB;AAAA,IACxD,GAAGpG,OAAAA;AAAAA,IACHS,cAAc;AAAA,GACf,CAAA;AAED,EAAA,MAAM8F,WAAW,YAAY;AAC3B,IAAA,IAAI,CAACN,OAAAA,CAAQjF,KAAAA,IAASkF,WAAAA,CAAYlF,KAAAA,EAAO;AACvC,MAAA;AAAA,IACF;AAEAkF,IAAAA,WAAAA,CAAYlF,KAAAA,GAAQ,IAAA;AACpB,IAAA,IAAI;AACF,MAAA,MAAMY,OAAOsB,OAAAA,EAAQ;AAAA,IACvB,CAAA,SAAC;AACCgD,MAAAA,WAAAA,CAAYlF,KAAAA,GAAQ,KAAA;AAAA,IACtB;AAAA,EACF,CAAA;AAEA,EAAA,MAAMwF,QAAQ,YAAY;AACxBR,IAAAA,KAAAA,CAAMhF,QAAQ,EAAA;AACdiF,IAAAA,OAAAA,CAAQjF,KAAAA,GAAQ,IAAA;AAChBmF,IAAAA,UAAAA,CAAWnF,KAAAA,GAAQG,MAAAA;AACnB,IAAA,MAAMS,OAAOsB,OAAAA,EAAQ;AAAA,EACvB,CAAA;AAEA,EAAA,OAAO;AAAA,IACL,GAAGtB,MAAAA;AAAAA,IACH2E,QAAAA;AAAAA,IACAN,OAAAA;AAAAA,IACAC,WAAAA;AAAAA,IACAM,KAAAA;AAAAA,IACAR,KAAAA,EAAOjF,YAAAA,CAAS,MAAMiF,KAAAA,CAAMhF,KAAK;AAAA,GACnC;AACF;;;;;;;;;;;"}