{"version":3,"file":"DataFetchingManager.cjs","sources":["../../src/data-fetching/DataFetchingManager.ts"],"sourcesContent":["/**\r\n * 数据预取管理器\r\n * @module DataFetchingManager\r\n */\r\n\r\nimport type { App} from 'vue';\r\nimport type { NavigationGuardNext, RouteLocationNormalized, Router } from '../types'\n\n/**\r\n * 数据获取函数类型\r\n */\r\nexport type DataFetchFunction<T = any> = (\r\n  route: RouteLocationNormalized,\r\n  params?: Record<string, any>\r\n) => Promise<T>\r\n\r\n/**\r\n * 数据获取配置\r\n */\r\nexport interface DataFetchConfig {\r\n  /** 获取函数 */\r\n  fetcher: DataFetchFunction\r\n  /** 缓存键生成器 */\r\n  cacheKey?: (route: RouteLocationNormalized) => string\r\n  /** 缓存时间（毫秒） */\r\n  cacheDuration?: number\r\n  /** 是否在客户端获取 */\r\n  fetchOnClient?: boolean\r\n  /** 是否在服务端获取 */\r\n  fetchOnServer?: boolean\r\n  /** 重试次数 */\r\n  retryCount?: number\r\n  /** 重试延迟（毫秒） */\r\n  retryDelay?: number\r\n  /** 超时时间（毫秒） */\r\n  timeout?: number\r\n  /** 是否并行获取 */\r\n  parallel?: boolean\r\n  /** 依赖的数据键 */\r\n  dependencies?: string[]\r\n  /** 错误处理器 */\r\n  onError?: (error: Error, route: RouteLocationNormalized) => void\r\n  /** 成功回调 */\r\n  onSuccess?: (data: any, route: RouteLocationNormalized) => void\r\n}\r\n\r\n/**\r\n * 数据获取状态\r\n */\r\nexport interface DataFetchState {\r\n  /** 是否加载中 */\r\n  loading: boolean\r\n  /** 错误信息 */\r\n  error: Error | null\r\n  /** 数据 */\r\n  data: any\r\n  /** 时间戳 */\r\n  timestamp: number\r\n  /** 是否从缓存加载 */\r\n  fromCache: boolean\r\n}\r\n\r\n/**\r\n * 缓存条目\r\n */\r\ninterface CacheEntry {\r\n  data: any\r\n  timestamp: number\r\n  expiry: number\r\n}\r\n\r\n/**\r\n * 数据获取选项\r\n */\r\nexport interface DataFetchOptions {\r\n  /** 是否启用全局缓存 */\r\n  globalCache?: boolean\r\n  /** 默认缓存时间 */\r\n  defaultCacheDuration?: number\r\n  /** 是否启用预加载 */\r\n  enablePrefetch?: boolean\r\n  /** 预加载延迟 */\r\n  prefetchDelay?: number\r\n  /** 是否启用并行获取 */\r\n  parallelFetch?: boolean\r\n  /** 最大并行数 */\r\n  maxParallel?: number\r\n  /** 是否启用重试 */\r\n  enableRetry?: boolean\r\n  /** 默认重试次数 */\r\n  defaultRetryCount?: number\r\n  /** 是否启用超时 */\r\n  enableTimeout?: boolean\r\n  /** 默认超时时间 */\r\n  defaultTimeout?: number\r\n  /** 是否启用错误边界 */\r\n  enableErrorBoundary?: boolean\r\n  /** 全局错误处理器 */\r\n  globalErrorHandler?: (error: Error, route: RouteLocationNormalized) => void\r\n}\r\n\r\n/**\r\n * 数据预取管理器类\r\n */\r\nexport class DataFetchingManager {\r\n  private router: Router | null = null\r\n  private cache = new Map<string, CacheEntry>()\r\n  private fetchConfigs = new Map<string, DataFetchConfig>()\r\n  private fetchStates = new Map<string, DataFetchState>()\r\n  private pendingFetches = new Map<string, Promise<any>>()\r\n  private options: DataFetchOptions\r\n  private prefetchQueue: Set<string> = new Set()\r\n  private fetchHistory: Map<string, number[]> = new Map()\r\n\r\n  constructor(options: DataFetchOptions = {}) {\r\n    this.options = {\r\n      globalCache: true,\r\n      defaultCacheDuration: 5 * 60 * 1000, // 5分钟\r\n      enablePrefetch: true,\r\n      prefetchDelay: 100,\r\n      parallelFetch: true,\r\n      maxParallel: 5,\r\n      enableRetry: true,\r\n      defaultRetryCount: 3,\r\n      enableTimeout: true,\r\n      defaultTimeout: 30000, // 30秒\r\n      enableErrorBoundary: true,\r\n      ...options\r\n    }\r\n\r\n    // 定期清理过期缓存\r\n    this.startCacheCleaner()\r\n  }\r\n\r\n  /**\r\n   * 初始化管理器\r\n   */\r\n  public init(router: Router) {\r\n    this.router = router\r\n\r\n    // 注册全局导航守卫\r\n    router.beforeEach(async (to, from, next) => {\r\n      await this.handleRouteChange(to, from, next)\r\n    })\r\n\r\n    // 注册路由后置守卫\r\n    router.afterEach((to, from) => {\r\n      this.handleAfterRoute(to, from)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 注册数据获取配置\r\n   */\r\n  public register(key: string, config: DataFetchConfig) {\r\n    this.fetchConfigs.set(key, {\r\n      fetchOnClient: true,\r\n      fetchOnServer: false,\r\n      parallel: this.options.parallelFetch,\r\n      retryCount: this.options.defaultRetryCount,\r\n      retryDelay: 1000,\r\n      timeout: this.options.defaultTimeout,\r\n      cacheDuration: this.options.defaultCacheDuration,\r\n      ...config\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 批量注册数据获取配置\r\n   */\r\n  public registerBatch(configs: Record<string, DataFetchConfig>) {\r\n    Object.entries(configs).forEach(([key, config]) => {\r\n      this.register(key, config)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 获取数据\r\n   */\r\n  public async fetch<T = any>(\r\n    key: string,\r\n    route: RouteLocationNormalized,\r\n    params?: Record<string, any>\r\n  ): Promise<T> {\r\n    const config = this.fetchConfigs.get(key)\r\n    if (!config) {\r\n      throw new Error(`Data fetch config not found: ${key}`)\r\n    }\r\n\r\n    // 生成缓存键\r\n    const cacheKey = this.generateCacheKey(key, route, config)\r\n\r\n    // 检查是否有进行中的请求\r\n    if (this.pendingFetches.has(cacheKey)) {\r\n      return this.pendingFetches.get(cacheKey)!\r\n    }\r\n\r\n    // 检查缓存\r\n    if (this.options.globalCache && config.cacheDuration) {\r\n      const cached = this.getFromCache(cacheKey)\r\n      if (cached !== null) {\r\n        this.updateState(key, {\r\n          loading: false,\r\n          error: null,\r\n          data: cached,\r\n          timestamp: Date.now(),\r\n          fromCache: true\r\n        })\r\n        return cached\r\n      }\r\n    }\r\n\r\n    // 更新状态为加载中\r\n    this.updateState(key, {\r\n      loading: true,\r\n      error: null,\r\n      data: null,\r\n      timestamp: Date.now(),\r\n      fromCache: false\r\n    })\r\n\r\n    // 创建获取promise\r\n    const fetchPromise = this.performFetch(key, config, route, params, cacheKey)\r\n    this.pendingFetches.set(cacheKey, fetchPromise)\r\n\r\n    try {\r\n      const data = await fetchPromise\r\n      return data\r\n    } finally {\r\n      this.pendingFetches.delete(cacheKey)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 执行数据获取\r\n   */\r\n  private async performFetch(\r\n    key: string,\r\n    config: DataFetchConfig,\r\n    route: RouteLocationNormalized,\r\n    params: Record<string, any> | undefined,\r\n    cacheKey: string\r\n  ): Promise<any> {\r\n    let lastError: Error | null = null\r\n    const retryCount = config.retryCount || 0\r\n\r\n    for (let i = 0; i <= retryCount; i++) {\r\n      try {\r\n        // 添加超时控制\r\n        const data = await this.fetchWithTimeout(\r\n          config.fetcher(route, params),\r\n          config.timeout || this.options.defaultTimeout!\r\n        )\r\n\r\n        // 更新缓存\r\n        if (this.options.globalCache && config.cacheDuration) {\r\n          this.setCache(cacheKey, data, config.cacheDuration)\r\n        }\r\n\r\n        // 更新状态\r\n        this.updateState(key, {\r\n          loading: false,\r\n          error: null,\r\n          data,\r\n          timestamp: Date.now(),\r\n          fromCache: false\r\n        })\r\n\r\n        // 调用成功回调\r\n        if (config.onSuccess) {\r\n          config.onSuccess(data, route)\r\n        }\r\n\r\n        // 记录获取历史\r\n        this.recordFetchHistory(key)\r\n\r\n        return data\r\n      } catch (error) {\r\n        lastError = error as Error\r\n\r\n        if (i < retryCount) {\r\n          // 等待重试延迟\r\n          await new Promise(resolve => \r\n            setTimeout(resolve, config.retryDelay || 1000)\r\n          )\r\n        }\r\n      }\r\n    }\r\n\r\n    // 更新错误状态\r\n    this.updateState(key, {\r\n      loading: false,\r\n      error: lastError,\r\n      data: null,\r\n      timestamp: Date.now(),\r\n      fromCache: false\r\n    })\r\n\r\n    // 调用错误处理器\r\n    if (config.onError) {\r\n      config.onError(lastError!, route)\r\n    } else if (this.options.globalErrorHandler) {\r\n      this.options.globalErrorHandler(lastError!, route)\r\n    }\r\n\r\n    throw lastError\r\n  }\r\n\r\n  /**\r\n   * 带超时的数据获取\r\n   */\r\n  private async fetchWithTimeout<T>(\r\n    promise: Promise<T>,\r\n    timeout: number\r\n  ): Promise<T> {\r\n    if (!this.options.enableTimeout) {\r\n      return promise\r\n    }\r\n\r\n    return Promise.race([\r\n      promise,\r\n      new Promise<never>((_, reject) =>\r\n        setTimeout(() => reject(new Error('Fetch timeout')), timeout)\r\n      )\r\n    ])\r\n  }\r\n\r\n  /**\r\n   * 预获取数据\r\n   */\r\n  public async prefetch(\r\n    key: string,\r\n    route: RouteLocationNormalized,\r\n    params?: Record<string, any>\r\n  ): Promise<void> {\r\n    if (!this.options.enablePrefetch) {\r\n      return\r\n    }\r\n\r\n    const config = this.fetchConfigs.get(key)\r\n    if (!config) {\r\n      return\r\n    }\r\n\r\n    const cacheKey = this.generateCacheKey(key, route, config)\r\n\r\n    // 检查是否已在队列中\r\n    if (this.prefetchQueue.has(cacheKey)) {\r\n      return\r\n    }\r\n\r\n    // 添加到预获取队列\r\n    this.prefetchQueue.add(cacheKey)\r\n\r\n    // 延迟执行预获取\r\n    setTimeout(async () => {\r\n      try {\r\n        await this.fetch(key, route, params)\r\n      } catch (error) {\r\n        // 预获取失败不抛出错误\r\n        console.warn(`Prefetch failed for ${key}:`, error)\r\n      } finally {\r\n        this.prefetchQueue.delete(cacheKey)\r\n      }\r\n    }, this.options.prefetchDelay || 100)\r\n  }\r\n\r\n  /**\r\n   * 批量预获取\r\n   */\r\n  public async prefetchBatch(\r\n    keys: string[],\r\n    route: RouteLocationNormalized,\r\n    params?: Record<string, any>\r\n  ): Promise<void> {\r\n    const promises = keys.map(key => this.prefetch(key, route, params))\r\n    await Promise.allSettled(promises)\r\n  }\r\n\r\n  /**\r\n   * 处理路由变化\r\n   */\r\n  private async handleRouteChange(\r\n    to: RouteLocationNormalized,\r\n    from: RouteLocationNormalized,\r\n    next: NavigationGuardNext\r\n  ) {\r\n    const routeFetchers = this.getRouteFetchers(to)\r\n\r\n    if (routeFetchers.length === 0) {\r\n      next()\r\n      return\r\n    }\r\n\r\n    try {\r\n      // 检查是否需要等待数据获取\r\n      const blockingFetchers = routeFetchers.filter(key => {\r\n        const config = this.fetchConfigs.get(key)\r\n        return config && !config.parallel\r\n      })\r\n\r\n      if (blockingFetchers.length > 0) {\r\n        // 串行获取阻塞数据\r\n        for (const key of blockingFetchers) {\r\n          await this.fetch(key, to)\r\n        }\r\n      }\r\n\r\n      // 并行获取非阻塞数据\r\n      const parallelFetchers = routeFetchers.filter(key => {\r\n        const config = this.fetchConfigs.get(key)\r\n        return config && config.parallel\r\n      })\r\n\r\n      if (parallelFetchers.length > 0) {\r\n        // 使用Promise.allSettled避免一个失败导致全部失败\r\n        const promises = parallelFetchers.map(key => this.fetch(key, to))\r\n        await Promise.allSettled(promises)\r\n      }\r\n\r\n      next()\r\n    } catch (error) {\r\n      // 处理错误\r\n      if (this.options.enableErrorBoundary) {\r\n        console.error('Route data fetch failed:', error)\r\n        next(false)\r\n      } else {\r\n        next()\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 处理路由后置操作\r\n   */\r\n  private handleAfterRoute(\r\n    to: RouteLocationNormalized,\r\n    from: RouteLocationNormalized\r\n  ) {\r\n    // 清理旧路由的状态\r\n    this.cleanupRouteStates(from)\r\n\r\n    // 预获取可能的下一页数据\r\n    this.prefetchNextRoutes(to)\r\n  }\r\n\r\n  /**\r\n   * 获取路由相关的数据获取器\r\n   */\r\n  private getRouteFetchers(route: RouteLocationNormalized): string[] {\r\n    const fetchers: string[] = []\r\n\r\n    // 从路由元信息获取\r\n    if (route.meta.fetchers) {\r\n      fetchers.push(...(route.meta.fetchers as string[]))\r\n    }\r\n\r\n    // 从路由名称匹配\r\n    if (route.name) {\r\n      this.fetchConfigs.forEach((config, key) => {\r\n        if (key.startsWith(route.name as string)) {\r\n          fetchers.push(key)\r\n        }\r\n      })\r\n    }\r\n\r\n    return [...new Set(fetchers)]\r\n  }\r\n\r\n  /**\r\n   * 预获取可能的下一页数据\r\n   */\r\n  private prefetchNextRoutes(route: RouteLocationNormalized) {\r\n    // 基于用户访问模式预测下一页\r\n    const predictions = this.predictNextRoutes(route)\r\n\r\n    predictions.forEach(nextRoute => {\r\n      const fetchers = this.getRouteFetchers(nextRoute)\r\n      fetchers.forEach(key => {\r\n        this.prefetch(key, nextRoute).catch(() => {\r\n          // 忽略预获取错误\r\n        })\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 预测下一个可能的路由\r\n   */\r\n  private predictNextRoutes(\r\n    currentRoute: RouteLocationNormalized\r\n  ): RouteLocationNormalized[] {\r\n    // 简单的预测逻辑，可以根据实际需求扩展\r\n    const predictions: RouteLocationNormalized[] = []\r\n\r\n    // 基于历史记录预测\r\n    // 这里可以实现更复杂的预测算法\r\n\r\n    return predictions\r\n  }\r\n\r\n  /**\r\n   * 清理路由状态\r\n   */\r\n  private cleanupRouteStates(route: RouteLocationNormalized) {\r\n    // 清理与路由相关的状态\r\n    const fetchers = this.getRouteFetchers(route)\r\n    fetchers.forEach(key => {\r\n      // 保留缓存，只清理状态\r\n      this.fetchStates.delete(key)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 生成缓存键\r\n   */\r\n  private generateCacheKey(\r\n    key: string,\r\n    route: RouteLocationNormalized,\r\n    config: DataFetchConfig\r\n  ): string {\r\n    if (config.cacheKey) {\r\n      return config.cacheKey(route)\r\n    }\r\n\r\n    // 默认缓存键生成\r\n    const routeKey = `${route.path}_${JSON.stringify(route.params)}_${JSON.stringify(route.query)}`\r\n    return `${key}_${routeKey}`\r\n  }\r\n\r\n  /**\r\n   * 从缓存获取数据\r\n   */\r\n  private getFromCache(key: string): any | null {\r\n    const entry = this.cache.get(key)\r\n    if (!entry) {\r\n      return null\r\n    }\r\n\r\n    if (Date.now() > entry.expiry) {\r\n      this.cache.delete(key)\r\n      return null\r\n    }\r\n\r\n    return entry.data\r\n  }\r\n\r\n  /**\r\n   * 设置缓存\r\n   */\r\n  private setCache(key: string, data: any, duration: number) {\r\n    this.cache.set(key, {\r\n      data,\r\n      timestamp: Date.now(),\r\n      expiry: Date.now() + duration\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 更新状态\r\n   */\r\n  private updateState(key: string, state: DataFetchState) {\r\n    this.fetchStates.set(key, state)\r\n  }\r\n\r\n  /**\r\n   * 获取状态\r\n   */\r\n  public getState(key: string): DataFetchState | undefined {\r\n    return this.fetchStates.get(key)\r\n  }\r\n\r\n  /**\r\n   * 获取所有状态\r\n   */\r\n  public getAllStates(): Map<string, DataFetchState> {\r\n    return new Map(this.fetchStates)\r\n  }\r\n\r\n  /**\r\n   * 清除缓存\r\n   */\r\n  public clearCache(key?: string) {\r\n    if (key) {\r\n      // 清除特定键的缓存\r\n      const cacheKeys = Array.from(this.cache.keys()).filter(k => k.startsWith(key))\r\n      cacheKeys.forEach(k => this.cache.delete(k))\r\n    } else {\r\n      // 清除所有缓存\r\n      this.cache.clear()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 刷新数据\r\n   */\r\n  public async refresh(\r\n    key: string,\r\n    route: RouteLocationNormalized,\r\n    params?: Record<string, any>\r\n  ): Promise<any> {\r\n    // 清除缓存\r\n    this.clearCache(key)\r\n\r\n    // 重新获取\r\n    return this.fetch(key, route, params)\r\n  }\r\n\r\n  /**\r\n   * 记录获取历史\r\n   */\r\n  private recordFetchHistory(key: string) {\r\n    const history = this.fetchHistory.get(key) || []\r\n    history.push(Date.now())\r\n\r\n    // 只保留最近100条记录\r\n    if (history.length > 100) {\r\n      history.shift()\r\n    }\r\n\r\n    this.fetchHistory.set(key, history)\r\n  }\r\n\r\n  /**\r\n   * 获取获取统计\r\n   */\r\n  public getStatistics(key?: string): Record<string, any> {\r\n    if (key) {\r\n      const history = this.fetchHistory.get(key) || []\r\n      const state = this.fetchStates.get(key)\r\n\r\n      return {\r\n        key,\r\n        totalFetches: history.length,\r\n        lastFetch: history[history.length - 1] || null,\r\n        averageInterval: this.calculateAverageInterval(history),\r\n        currentState: state,\r\n        cacheHitRate: this.calculateCacheHitRate(key)\r\n      }\r\n    }\r\n\r\n    // 返回所有统计\r\n    const stats: Record<string, any> = {}\r\n    this.fetchConfigs.forEach((_, k) => {\r\n      stats[k] = this.getStatistics(k)\r\n    })\r\n\r\n    return stats\r\n  }\r\n\r\n  /**\r\n   * 计算平均获取间隔\r\n   */\r\n  private calculateAverageInterval(history: number[]): number {\r\n    if (history.length < 2) {\r\n      return 0\r\n    }\r\n\r\n    let totalInterval = 0\r\n    for (let i = 1; i < history.length; i++) {\r\n      totalInterval += history[i] - history[i - 1]\r\n    }\r\n\r\n    return totalInterval / (history.length - 1)\r\n  }\r\n\r\n  /**\r\n   * 计算缓存命中率\r\n   */\r\n  private calculateCacheHitRate(key: string): number {\r\n    // 简化的缓存命中率计算\r\n    const state = this.fetchStates.get(key)\r\n    if (!state) {\r\n      return 0\r\n    }\r\n\r\n    // 这里可以实现更复杂的统计逻辑\r\n    return state.fromCache ? 1 : 0\r\n  }\r\n\r\n  /**\r\n   * 启动缓存清理器\r\n   */\r\n  private startCacheCleaner() {\r\n    setInterval(() => {\r\n      const now = Date.now()\r\n      this.cache.forEach((entry, key) => {\r\n        if (now > entry.expiry) {\r\n          this.cache.delete(key)\r\n        }\r\n      })\r\n    }, 60000) // 每分钟清理一次\r\n  }\r\n\r\n  /**\r\n   * 销毁管理器\r\n   */\r\n  public destroy() {\r\n    this.cache.clear()\r\n    this.fetchConfigs.clear()\r\n    this.fetchStates.clear()\r\n    this.pendingFetches.clear()\r\n    this.prefetchQueue.clear()\r\n    this.fetchHistory.clear()\r\n  }\r\n}\r\n\r\n/**\r\n * 数据获取注入键\r\n */\r\nexport const DATA_FETCHING_KEY = Symbol('DataFetching')\r\n\r\n/**\r\n * Vue插件\r\n */\r\nexport const DataFetchingPlugin = {\r\n  install(app: App, options?: DataFetchOptions) {\r\n    const manager = new DataFetchingManager(options)\r\n    \r\n    app.provide(DATA_FETCHING_KEY, manager)\r\n\r\n    // 添加全局属性\r\n    app.config.globalProperties.$dataFetching = manager\r\n  }\r\n}\r\n\r\n/**\r\n * 创建数据预取管理器\r\n */\r\nexport function createDataFetchingManager(options?: DataFetchOptions): DataFetchingManager {\r\n  return new DataFetchingManager(options)\r\n}"],"names":["DataFetchingManager","constructor","options","router","cache","Map","fetchConfigs","fetchStates","pendingFetches","prefetchQueue","Set","fetchHistory","globalCache","defaultCacheDuration","enablePrefetch","prefetchDelay","parallelFetch","maxParallel","enableRetry","defaultRetryCount","enableTimeout","defaultTimeout","enableErrorBoundary","startCacheCleaner","init","beforeEach","to","from","next","handleRouteChange","afterEach","handleAfterRoute","register","key","config","set","fetchOnClient","fetchOnServer","parallel","retryCount","retryDelay","timeout","cacheDuration","registerBatch","configs","Object","entries","forEach","fetch","route","params","get","Error","cacheKey","generateCacheKey","has","cached","getFromCache","updateState","loading","error","data","timestamp","Date","now","fromCache","fetchPromise","performFetch","delete","lastError","i","fetchWithTimeout","fetcher","setCache","onSuccess","recordFetchHistory","Promise","resolve","setTimeout","onError","globalErrorHandler","promise","race","_","reject","prefetch","add","console","warn","prefetchBatch","keys","promises","map","allSettled","routeFetchers","getRouteFetchers","length","blockingFetchers","filter","parallelFetchers","cleanupRouteStates","prefetchNextRoutes","fetchers","meta","push","name","startsWith","predictions","predictNextRoutes","nextRoute","catch","currentRoute","routeKey","path","JSON","stringify","query","entry","expiry","duration","state","getState","getAllStates","clearCache","cacheKeys","Array","k","clear","refresh","history","shift","getStatistics","totalFetches","lastFetch","averageInterval","calculateAverageInterval","currentState","cacheHitRate","calculateCacheHitRate","stats","totalInterval","setInterval","destroy","DATA_FETCHING_KEY","Symbol","DataFetchingPlugin","install","app","manager","provide","globalProperties","$dataFetching","createDataFetchingManager"],"mappings":"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"}