{"version":3,"file":"RouteTypeGenerator.cjs","sources":["../../src/type-generator/RouteTypeGenerator.ts"],"sourcesContent":["/**\r\n * 路由类型自动生成器\r\n * @module RouteTypeGenerator\r\n */\r\n\r\nimport type { RouteRecordRaw } from '../types'\r\nimport * as fs from 'node:fs'\r\nimport * as path from 'node:path'\r\n\r\n/**\r\n * 路由类型生成选项\r\n */\r\nexport interface RouteTypeGeneratorOptions {\r\n  /** 路由配置文件路径 */\r\n  routesPath?: string\r\n  /** 输出目录 */\r\n  outputDir?: string\r\n  /** 输出文件名 */\r\n  outputFileName?: string\r\n  /** 是否生成路径参数类型 */\r\n  generateParams?: boolean\r\n  /** 是否生成查询参数类型 */\r\n  generateQuery?: boolean\r\n  /** 是否生成元信息类型 */\r\n  generateMeta?: boolean\r\n  /** 是否生成导航守卫类型 */\r\n  generateGuards?: boolean\r\n  /** 是否启用严格模式 */\r\n  strictMode?: boolean\r\n  /** 是否监听文件变化 */\r\n  watch?: boolean\r\n  /** 自定义类型转换器 */\r\n  customTransformers?: TypeTransformer[]\r\n  /** 模板配置 */\r\n  templates?: TypeTemplates\r\n  /** 是否生成联合类型 */\r\n  generateUnions?: boolean\r\n  /** 是否生成枚举 */\r\n  generateEnums?: boolean\r\n}\r\n\r\n/**\r\n * 类型转换器\r\n */\r\nexport interface TypeTransformer {\r\n  /** 转换器名称 */\r\n  name: string\r\n  /** 匹配模式 */\r\n  pattern: RegExp | string\r\n  /** 转换函数 */\r\n  transform: (route: RouteRecordRaw) => string\r\n}\r\n\r\n/**\r\n * 类型模板配置\r\n */\r\nexport interface TypeTemplates {\r\n  /** 文件头部模板 */\r\n  header?: string\r\n  /** 文件尾部模板 */\r\n  footer?: string\r\n  /** 路由类型模板 */\r\n  route?: string\r\n  /** 参数类型模板 */\r\n  params?: string\r\n  /** 查询类型模板 */\r\n  query?: string\r\n  /** 元信息类型模板 */\r\n  meta?: string\r\n}\r\n\r\n/**\r\n * 路由信息\r\n */\r\ninterface RouteInfo {\r\n  name: string\r\n  path: string\r\n  params: Record<string, string>\r\n  query: Record<string, string>\r\n  meta: Record<string, any>\r\n  component?: string\r\n  children?: RouteInfo[]\r\n}\r\n\r\n/**\r\n * 生成的类型定义\r\n */\r\ninterface GeneratedTypes {\r\n  /** 路由名称类型 */\r\n  routeNames: string\r\n  /** 路由路径类型 */\r\n  routePaths: string\r\n  /** 路由参数类型 */\r\n  routeParams: string\r\n  /** 路由查询类型 */\r\n  routeQuery: string\r\n  /** 路由元信息类型 */\r\n  routeMeta: string\r\n  /** 路由映射类型 */\r\n  routeMap: string\r\n  /** 辅助类型 */\r\n  helpers: string\r\n}\r\n\r\n/**\r\n * 路由类型生成器类\r\n */\r\nexport class RouteTypeGenerator {\r\n  private options: Required<RouteTypeGeneratorOptions>\r\n  private routes: RouteRecordRaw[] = []\r\n  private routeInfos: RouteInfo[] = []\r\n  private generatedTypes: GeneratedTypes = {\r\n    routeNames: '',\r\n    routePaths: '',\r\n    routeParams: '',\r\n    routeQuery: '',\r\n    routeMeta: '',\r\n    routeMap: '',\r\n    helpers: ''\r\n  }\r\n  private fileWatcher: fs.FSWatcher | null = null\r\n\r\n  constructor(options: RouteTypeGeneratorOptions = {}) {\r\n    this.options = {\r\n      routesPath: './src/routes.ts',\r\n      outputDir: './src/types',\r\n      outputFileName: 'route-types.ts',\r\n      generateParams: true,\r\n      generateQuery: true,\r\n      generateMeta: true,\r\n      generateGuards: true,\r\n      strictMode: false,\r\n      watch: false,\r\n      generateUnions: true,\r\n      generateEnums: true,\r\n      customTransformers: [],\r\n      templates: this.getDefaultTemplates(),\r\n      ...options\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取默认模板\r\n   */\r\n  private getDefaultTemplates(): TypeTemplates {\r\n    return {\r\n      header: `/**\r\n * 自动生成的路由类型定义\r\n * @generated\r\n * @description 此文件由路由类型生成器自动生成，请勿手动修改\r\n */\r\n\r\nimport type { RouteLocationNormalizedLoaded, RouteLocationRaw, RouteParams, LocationQuery } from 'vue-router'\r\n\r\n`,\r\n      footer: `\r\n/**\r\n * 类型导出\r\n */\r\nexport type {\r\n  RouteNames,\r\n  RoutePaths,\r\n  RouteParamsMap,\r\n  RouteQueryMap,\r\n  RouteMetaMap,\r\n  RouteMap,\r\n  TypedRoute,\r\n  TypedRouteLocation,\r\n  TypedRouteLocationRaw\r\n}\r\n`,\r\n      route: '',\r\n      params: '',\r\n      query: '',\r\n      meta: ''\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 生成类型\r\n   */\r\n  public async generate(routes?: RouteRecordRaw[]): Promise<void> {\r\n    try {\r\n      // 加载路由\r\n      if (routes) {\r\n        this.routes = routes\r\n      } else {\r\n        this.routes = await this.loadRoutes()\r\n      }\r\n\r\n      // 解析路由信息\r\n      this.routeInfos = this.parseRoutes(this.routes)\r\n\r\n      // 生成类型定义\r\n      this.generateRouteNames()\r\n      this.generateRoutePaths()\r\n      \r\n      if (this.options.generateParams) {\r\n        this.generateRouteParams()\r\n      }\r\n      \r\n      if (this.options.generateQuery) {\r\n        this.generateRouteQuery()\r\n      }\r\n      \r\n      if (this.options.generateMeta) {\r\n        this.generateRouteMeta()\r\n      }\r\n\r\n      this.generateRouteMap()\r\n      this.generateHelperTypes()\r\n\r\n      // 写入文件\r\n      await this.writeTypes()\r\n\r\n      // 启动监听\r\n      if (this.options.watch) {\r\n        this.startWatcher()\r\n      }\r\n\r\n      console.log('✅ 路由类型生成成功')\r\n    } catch (error) {\r\n      console.error('❌ 路由类型生成失败:', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 加载路由配置\r\n   */\r\n  private async loadRoutes(): Promise<RouteRecordRaw[]> {\r\n    const routesPath = path.resolve(this.options.routesPath)\r\n    \r\n    if (!fs.existsSync(routesPath)) {\r\n      throw new Error(`路由文件不存在: ${routesPath}`)\r\n    }\r\n\r\n    // 动态导入路由文件\r\n    const routeModule = await import(routesPath)\r\n    return routeModule.default || routeModule.routes || []\r\n  }\r\n\r\n  /**\r\n   * 解析路由信息\r\n   */\r\n  private parseRoutes(routes: RouteRecordRaw[], parentPath = ''): RouteInfo[] {\r\n    const infos: RouteInfo[] = []\r\n\r\n    for (const route of routes) {\r\n      const fullPath = this.joinPath(parentPath, route.path)\r\n      const params = this.extractParams(fullPath)\r\n      const query = this.extractQuery(route)\r\n      \r\n      const info: RouteInfo = {\r\n        name: String(route.name || ''),\r\n        path: fullPath,\r\n        params,\r\n        query,\r\n        meta: route.meta || {},\r\n        component: route.component as string | undefined\r\n      }\r\n\r\n      if (route.children) {\r\n        info.children = this.parseRoutes(route.children, fullPath)\r\n      }\r\n\r\n      infos.push(info)\r\n\r\n      // 递归添加子路由\r\n      if (info.children) {\r\n        infos.push(...info.children)\r\n      }\r\n    }\r\n\r\n    return infos\r\n  }\r\n\r\n  /**\r\n   * 连接路径\r\n   */\r\n  private joinPath(parent: string, child: string): string {\r\n    if (child.startsWith('/')) {\r\n      return child\r\n    }\r\n    \r\n    const separator = parent.endsWith('/') ? '' : '/'\r\n    return parent + separator + child\r\n  }\r\n\r\n  /**\r\n   * 提取路径参数\r\n   */\r\n  private extractParams(path: string): Record<string, string> {\r\n    const params: Record<string, string> = {}\r\n    const paramRegex = /:([^/]+)(\\(.*?\\))?(\\?)?/g\r\n    let match\r\n\r\n    while ((match = paramRegex.exec(path)) !== null) {\r\n      const paramName = match[1]\r\n      const isOptional = match[3] === '?'\r\n      params[paramName] = isOptional ? 'string | undefined' : 'string'\r\n    }\r\n\r\n    return params\r\n  }\r\n\r\n  /**\r\n   * 提取查询参数\r\n   */\r\n  private extractQuery(route: RouteRecordRaw): Record<string, string> {\r\n    // 从路由配置中提取查询参数信息\r\n    // 这里可以根据实际项目的约定来解析\r\n    const query: Record<string, string> = {}\r\n    \r\n    if (route.meta?.query) {\r\n      Object.assign(query, route.meta.query)\r\n    }\r\n\r\n    return query\r\n  }\r\n\r\n  /**\r\n   * 生成路由名称类型\r\n   */\r\n  private generateRouteNames() {\r\n    const names = this.routeInfos\r\n      .filter(info => info.name)\r\n      .map(info => `'${info.name}'`)\r\n\r\n    if (this.options.generateEnums) {\r\n      // 生成枚举\r\n      this.generatedTypes.routeNames = `\r\n/**\r\n * 路由名称枚举\r\n */\r\nexport enum RouteNamesEnum {\r\n${this.routeInfos\r\n  .filter(info => info.name)\r\n  .map(info => `  ${this.toUpperCase(info.name)} = '${info.name}'`)\r\n  .join(',\\n')}\r\n}\r\n`\r\n    }\r\n\r\n    if (this.options.generateUnions) {\r\n      // 生成联合类型\r\n      this.generatedTypes.routeNames += `\r\n/**\r\n * 路由名称类型\r\n */\r\nexport type RouteNames = ${names.length > 0 ? names.join(' | ') : 'never'}\r\n`\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 生成路由路径类型\r\n   */\r\n  private generateRoutePaths() {\r\n    const paths = this.routeInfos\r\n      .map(info => `'${info.path}'`)\r\n\r\n    if (this.options.generateEnums) {\r\n      // 生成枚举\r\n      this.generatedTypes.routePaths = `\r\n/**\r\n * 路由路径枚举\r\n */\r\nexport enum RoutePathsEnum {\r\n${this.routeInfos\r\n  .map(info => `  ${this.toUpperCase(info.name || info.path)} = '${info.path}'`)\r\n  .join(',\\n')}\r\n}\r\n`\r\n    }\r\n\r\n    if (this.options.generateUnions) {\r\n      // 生成联合类型\r\n      this.generatedTypes.routePaths += `\r\n/**\r\n * 路由路径类型\r\n */\r\nexport type RoutePaths = ${paths.length > 0 ? paths.join(' | ') : 'never'}\r\n`\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 生成路由参数类型\r\n   */\r\n  private generateRouteParams() {\r\n    const paramsMap: string[] = []\r\n\r\n    for (const info of this.routeInfos) {\r\n      if (Object.keys(info.params).length > 0 && info.name) {\r\n        const paramType = this.generateObjectType(info.params)\r\n        paramsMap.push(`  '${info.name}': ${paramType}`)\r\n      }\r\n    }\r\n\r\n    this.generatedTypes.routeParams = `\r\n/**\r\n * 路由参数映射\r\n */\r\nexport interface RouteParamsMap {\r\n${paramsMap.length > 0 ? paramsMap.join('\\n') : '  [key: string]: never'}\r\n}\r\n\r\n/**\r\n * 获取路由参数类型\r\n */\r\nexport type GetRouteParams<T extends RouteNames> = T extends keyof RouteParamsMap \r\n  ? RouteParamsMap[T] \r\n  : Record<string, string | undefined>\r\n`\r\n  }\r\n\r\n  /**\r\n   * 生成路由查询类型\r\n   */\r\n  private generateRouteQuery() {\r\n    const queryMap: string[] = []\r\n\r\n    for (const info of this.routeInfos) {\r\n      if (Object.keys(info.query).length > 0 && info.name) {\r\n        const queryType = this.generateObjectType(info.query)\r\n        queryMap.push(`  '${info.name}': ${queryType}`)\r\n      }\r\n    }\r\n\r\n    this.generatedTypes.routeQuery = `\r\n/**\r\n * 路由查询参数映射\r\n */\r\nexport interface RouteQueryMap {\r\n${queryMap.length > 0 ? queryMap.join('\\n') : '  [key: string]: never'}\r\n}\r\n\r\n/**\r\n * 获取路由查询参数类型\r\n */\r\nexport type GetRouteQuery<T extends RouteNames> = T extends keyof RouteQueryMap \r\n  ? RouteQueryMap[T] \r\n  : LocationQuery\r\n`\r\n  }\r\n\r\n  /**\r\n   * 生成路由元信息类型\r\n   */\r\n  private generateRouteMeta() {\r\n    const metaMap: string[] = []\r\n\r\n    for (const info of this.routeInfos) {\r\n      if (Object.keys(info.meta).length > 0 && info.name) {\r\n        const metaType = this.generateObjectType(info.meta)\r\n        metaMap.push(`  '${info.name}': ${metaType}`)\r\n      }\r\n    }\r\n\r\n    this.generatedTypes.routeMeta = `\r\n/**\r\n * 路由元信息映射\r\n */\r\nexport interface RouteMetaMap {\r\n${metaMap.length > 0 ? metaMap.join('\\n') : '  [key: string]: never'}\r\n}\r\n\r\n/**\r\n * 获取路由元信息类型\r\n */\r\nexport type GetRouteMeta<T extends RouteNames> = T extends keyof RouteMetaMap \r\n  ? RouteMetaMap[T] \r\n  : Record<string, any>\r\n`\r\n  }\r\n\r\n  /**\r\n   * 生成路由映射类型\r\n   */\r\n  private generateRouteMap() {\r\n    const routeMap: string[] = []\r\n\r\n    for (const info of this.routeInfos) {\r\n      if (info.name) {\r\n        routeMap.push(`  '${info.name}': {\r\n    name: '${info.name}'\r\n    path: '${info.path}'\r\n    params: ${this.generateObjectType(info.params)}\r\n    query: ${this.generateObjectType(info.query)}\r\n    meta: ${this.generateObjectType(info.meta)}\r\n  }`)\r\n      }\r\n    }\r\n\r\n    this.generatedTypes.routeMap = `\r\n/**\r\n * 完整路由映射\r\n */\r\nexport interface RouteMap {\r\n${routeMap.length > 0 ? routeMap.join('\\n') : '  [key: string]: never'}\r\n}\r\n`\r\n  }\r\n\r\n  /**\r\n   * 生成辅助类型\r\n   */\r\n  private generateHelperTypes() {\r\n    this.generatedTypes.helpers = `\r\n/**\r\n * 类型安全的路由对象\r\n */\r\nexport interface TypedRoute<T extends RouteNames = RouteNames> {\r\n  name: T\r\n  params?: T extends keyof RouteParamsMap ? RouteParamsMap[T] : never\r\n  query?: T extends keyof RouteQueryMap ? RouteQueryMap[T] : never\r\n  meta?: T extends keyof RouteMetaMap ? RouteMetaMap[T] : never\r\n}\r\n\r\n/**\r\n * 类型安全的路由位置\r\n */\r\nexport type TypedRouteLocation<T extends RouteNames = RouteNames> = \r\n  RouteLocationNormalizedLoaded & TypedRoute<T>\r\n\r\n/**\r\n * 类型安全的路由跳转参数\r\n */\r\nexport type TypedRouteLocationRaw<T extends RouteNames = RouteNames> = \r\n  | T\r\n  | TypedRoute<T>\r\n  | { path: RoutePaths }\r\n\r\n/**\r\n * 路由导航守卫类型\r\n */\r\nexport type TypedNavigationGuard<T extends RouteNames = RouteNames> = (\r\n  to: TypedRouteLocation<T>,\r\n  from: TypedRouteLocation<T>\r\n) => void | Promise<void> | boolean | RouteLocationRaw\r\n\r\n/**\r\n * 路由钩子类型\r\n */\r\nexport type TypedRouteHook<T extends RouteNames = RouteNames> = (\r\n  route: TypedRouteLocation<T>\r\n) => void | Promise<void>\r\n\r\n/**\r\n * 严格模式路由类型\r\n */\r\n${this.options.strictMode ? `\r\nexport type StrictRoute<T extends RouteNames> = {\r\n  [K in keyof RouteMap[T]]: RouteMap[T][K]\r\n}\r\n` : ''}\r\n`\r\n  }\r\n\r\n  /**\r\n   * 生成对象类型字符串\r\n   */\r\n  private generateObjectType(obj: Record<string, any>): string {\r\n    if (Object.keys(obj).length === 0) {\r\n      return '{}'\r\n    }\r\n\r\n    const entries = Object.entries(obj).map(([key, value]) => {\r\n      const type = this.inferType(value)\r\n      return `    ${key}: ${type}`\r\n    })\r\n\r\n    return `{\\n${entries.join('\\n')}\\n  }`\r\n  }\r\n\r\n  /**\r\n   * 推断类型\r\n   */\r\n  private inferType(value: any): string {\r\n    if (value === null) return 'null'\r\n    if (value === undefined) return 'undefined'\r\n    if (typeof value === 'string') {\r\n      // 检查是否是类型字符串\r\n      if (value.includes('|') || value.includes('&')) {\r\n        return value\r\n      }\r\n      return `'${value}'`\r\n    }\r\n    if (typeof value === 'number') return 'number'\r\n    if (typeof value === 'boolean') return 'boolean'\r\n    if (Array.isArray(value)) {\r\n      if (value.length === 0) return 'any[]'\r\n      const types = value.map(v => this.inferType(v))\r\n      const uniqueTypes = [...new Set(types)]\r\n      return uniqueTypes.length === 1 \r\n        ? `${uniqueTypes[0]}[]` \r\n        : `(${uniqueTypes.join(' | ')})[]`\r\n    }\r\n    if (typeof value === 'object') {\r\n      return this.generateObjectType(value)\r\n    }\r\n    return 'any'\r\n  }\r\n\r\n  /**\r\n   * 转换为大写下划线格式\r\n   */\r\n  private toUpperCase(str: string): string {\r\n    return str\r\n      .replace(/([A-Z])/g, '_$1')\r\n      .replace(/[^a-z0-9]/gi, '_')\r\n      .toUpperCase()\r\n      .replace(/^_/, '')\r\n  }\r\n\r\n  /**\r\n   * 写入类型文件\r\n   */\r\n  private async writeTypes(): Promise<void> {\r\n    const outputPath = path.resolve(this.options.outputDir, this.options.outputFileName)\r\n    \r\n    // 确保输出目录存在\r\n    const outputDir = path.dirname(outputPath)\r\n    if (!fs.existsSync(outputDir)) {\r\n      fs.mkdirSync(outputDir, { recursive: true })\r\n    }\r\n\r\n    // 组合所有类型定义\r\n    const content = [\r\n      this.options.templates?.header || this.getDefaultTemplates().header,\r\n      this.generatedTypes.routeNames,\r\n      this.generatedTypes.routePaths,\r\n      this.generatedTypes.routeParams,\r\n      this.generatedTypes.routeQuery,\r\n      this.generatedTypes.routeMeta,\r\n      this.generatedTypes.routeMap,\r\n      this.generatedTypes.helpers,\r\n      this.options.templates?.footer || this.getDefaultTemplates().footer\r\n    ].join('\\n')\r\n\r\n    // 写入文件\r\n    fs.writeFileSync(outputPath, content, 'utf-8')\r\n    \r\n    console.log(`📝 类型文件已生成: ${outputPath}`)\r\n  }\r\n\r\n  /**\r\n   * 启动文件监听\r\n   */\r\n  private startWatcher() {\r\n    if (this.fileWatcher) {\r\n      this.fileWatcher.close()\r\n    }\r\n\r\n    const watchPath = path.resolve(this.options.routesPath)\r\n    \r\n    this.fileWatcher = fs.watch(watchPath, async (eventType, filename) => {\r\n      console.log(`🔄 检测到路由文件变化: ${filename}`)\r\n      \r\n      // 延迟重新生成，避免频繁触发\r\n      setTimeout(async () => {\r\n        try {\r\n          await this.generate()\r\n        } catch (error) {\r\n          console.error('❌ 自动生成失败:', error)\r\n        }\r\n      }, 500)\r\n    })\r\n\r\n    console.log(`👀 正在监听路由文件: ${watchPath}`)\r\n  }\r\n\r\n  /**\r\n   * 停止监听\r\n   */\r\n  public stopWatcher() {\r\n    if (this.fileWatcher) {\r\n      this.fileWatcher.close()\r\n      this.fileWatcher = null\r\n      console.log('🛑 已停止监听')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 应用自定义转换器\r\n   */\r\n  private applyTransformers(route: RouteRecordRaw): Record<string, string> {\r\n    const results: Record<string, string> = {}\r\n\r\n    for (const transformer of this.options.customTransformers) {\r\n      const pattern = transformer.pattern\r\n      const shouldTransform = typeof pattern === 'string' \r\n        ? route.path.includes(pattern)\r\n        : pattern.test(route.path)\r\n\r\n      if (shouldTransform) {\r\n        const transformed = transformer.transform(route)\r\n        results[transformer.name] = transformed\r\n      }\r\n    }\r\n\r\n    return results\r\n  }\r\n\r\n  /**\r\n   * 生成类型声明文件\r\n   */\r\n  public async generateDeclaration(): Promise<void> {\r\n    const declarationContent = `\r\ndeclare module 'vue-router' {\r\n  import type { RouteNames, RouteParamsMap, RouteQueryMap, RouteMetaMap } from '${this.options.outputFileName.replace('.ts', '')}'\r\n\r\n  export interface RouteMeta extends RouteMetaMap[keyof RouteMetaMap] {}\r\n  \r\n  export interface RouteLocationNormalizedLoaded {\r\n    name: RouteNames\r\n    params: RouteParamsMap[RouteNames]\r\n    query: RouteQueryMap[RouteNames]\r\n    meta: RouteMetaMap[RouteNames]\r\n  }\r\n}\r\n`\r\n\r\n    const declarationPath = path.resolve(\r\n      this.options.outputDir, \r\n      'vue-router.d.ts'\r\n    )\r\n\r\n    fs.writeFileSync(declarationPath, declarationContent, 'utf-8')\r\n    console.log(`📝 声明文件已生成: ${declarationPath}`)\r\n  }\r\n\r\n  /**\r\n   * 清理生成的文件\r\n   */\r\n  public clean() {\r\n    const outputPath = path.resolve(this.options.outputDir, this.options.outputFileName)\r\n    const declarationPath = path.resolve(this.options.outputDir, 'vue-router.d.ts')\r\n\r\n    if (fs.existsSync(outputPath)) {\r\n      fs.unlinkSync(outputPath)\r\n      console.log(`🗑️  已删除: ${outputPath}`)\r\n    }\r\n\r\n    if (fs.existsSync(declarationPath)) {\r\n      fs.unlinkSync(declarationPath)\r\n      console.log(`🗑️  已删除: ${declarationPath}`)\r\n    }\r\n\r\n    this.stopWatcher()\r\n  }\r\n}\r\n\r\n/**\r\n * 创建路由类型生成器\r\n */\r\nexport function createRouteTypeGenerator(\r\n  options?: RouteTypeGeneratorOptions\r\n): RouteTypeGenerator {\r\n  return new RouteTypeGenerator(options)\r\n}"],"names":["RouteTypeGenerator","constructor","options","routes","routeInfos","generatedTypes","routeNames","routePaths","routeParams","routeQuery","routeMeta","routeMap","helpers","fileWatcher","routesPath","outputDir","outputFileName","generateParams","generateQuery","generateMeta","generateGuards","strictMode","watch","generateUnions","generateEnums","customTransformers","templates","getDefaultTemplates","header","footer","route","params","query","meta","generate","loadRoutes","parseRoutes","generateRouteNames","generateRoutePaths","generateRouteParams","generateRouteQuery","generateRouteMeta","generateRouteMap","generateHelperTypes","writeTypes","startWatcher","console","log","error","path","resolve","fs","existsSync","Error","routeModule","default","parentPath","infos","fullPath","joinPath","extractParams","extractQuery","info","name","String","component","children","push","parent","child","startsWith","separator","endsWith","paramRegex","match","exec","paramName","isOptional","Object","assign","names","filter","map","toUpperCase","join","length","paths","paramsMap","keys","paramType","generateObjectType","queryMap","queryType","metaMap","metaType","obj","entries","key","value","type","inferType","undefined","includes","Array","isArray","types","v","uniqueTypes","Set","str","replace","outputPath","dirname","mkdirSync","recursive","content","writeFileSync","close","watchPath","eventType","filename","setTimeout","stopWatcher","applyTransformers","results","transformer","pattern","shouldTransform","test","transformed","transform","generateDeclaration","declarationContent","declarationPath","clean","unlinkSync","createRouteTypeGenerator"],"mappings":"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"}