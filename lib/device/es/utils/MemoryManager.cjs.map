{"version":3,"file":"MemoryManager.cjs","sources":["../../../../../device/es/utils/MemoryManager.js"],"sourcesContent":["/*!\n * ***********************************\n * @ldesign/device v0.1.0          *\n * Built with rollup               *\n * Build time: 2024-10-21 14:32:55 *\n * Build mode: production          *\n * Minified: No                    *\n * ***********************************\n */\nclass ObjectPool {\n  constructor(config) {\n    this.pool = [];\n    this.inUse = /* @__PURE__ */ new Set();\n    this.maxSize = config.maxSize;\n    this.createFn = config.createFn;\n    this.resetFn = config.resetFn;\n    const initialSize = config.initialSize || Math.min(10, config.maxSize);\n    for (let i = 0; i < initialSize; i++) {\n      this.pool.push(this.createFn());\n    }\n  }\n  /**\n   * 获取对象\n   */\n  acquire() {\n    let obj;\n    if (this.pool.length > 0) {\n      const popped = this.pool.pop();\n      if (!popped) {\n        obj = this.createFn();\n      } else {\n        obj = popped;\n      }\n    } else {\n      obj = this.createFn();\n    }\n    this.inUse.add(obj);\n    return obj;\n  }\n  /**\n   * 释放对象\n   */\n  release(obj) {\n    if (!this.inUse.has(obj)) {\n      return;\n    }\n    this.inUse.delete(obj);\n    if (this.resetFn) {\n      this.resetFn(obj);\n    }\n    if (this.pool.length < this.maxSize) {\n      this.pool.push(obj);\n    }\n  }\n  /**\n   * 清空对象池\n   */\n  clear() {\n    this.pool.length = 0;\n    this.inUse.clear();\n  }\n  /**\n   * 获取池统计信息\n   */\n  getStats() {\n    return {\n      poolSize: this.pool.length,\n      inUseSize: this.inUse.size,\n      totalSize: this.pool.length + this.inUse.size,\n      maxSize: this.maxSize\n    };\n  }\n}\nconst _MemoryManager = class _MemoryManager {\n  constructor() {\n    this.pools = /* @__PURE__ */ new Map();\n    this.memoryCheckInterval = null;\n    this.gcCallbacks = /* @__PURE__ */ new Set();\n    this.memoryThreshold = 0.8;\n    // 80%内存使用率触发清理\n    this.lastGCTime = 0;\n    this.gcCount = 0;\n    this.weakRefs = /* @__PURE__ */ new Map();\n    // 性能统计\n    this.stats = {\n      totalAllocations: 0,\n      totalDeallocations: 0,\n      gcTriggers: 0,\n      memoryPressureEvents: 0\n    };\n    this.finalizationRegistry = new FinalizationRegistry((heldValue) => {\n      this.onObjectFinalized(heldValue);\n    });\n    this.startMemoryMonitoring();\n  }\n  /**\n   * 获取单例实例\n   */\n  static getInstance() {\n    if (!_MemoryManager.instance) {\n      _MemoryManager.instance = new _MemoryManager();\n    }\n    return _MemoryManager.instance;\n  }\n  /**\n   * 注册对象池\n   */\n  registerPool(name, config) {\n    if (this.pools.has(name)) {\n      throw new Error(`Pool \"${name}\" already exists`);\n    }\n    const pool = new ObjectPool(config);\n    this.pools.set(name, pool);\n    return pool;\n  }\n  /**\n   * 获取对象池\n   */\n  getPool(name) {\n    return this.pools.get(name);\n  }\n  /**\n   * 从池中获取对象\n   */\n  acquireFromPool(poolName) {\n    const pool = this.pools.get(poolName);\n    return pool?.acquire();\n  }\n  /**\n   * 释放对象到池\n   */\n  releaseToPool(poolName, obj) {\n    const pool = this.pools.get(poolName);\n    pool?.release(obj);\n  }\n  /**\n   * 注册弱引用对象（用于追踪大对象）\n   */\n  registerWeakRef(key, obj) {\n    const weakRef = new WeakRef(obj);\n    this.weakRefs.set(key, weakRef);\n    this.finalizationRegistry.register(obj, key);\n    this.stats.totalAllocations++;\n  }\n  /**\n   * 获取弱引用对象\n   */\n  getWeakRef(key) {\n    const weakRef = this.weakRefs.get(key);\n    if (weakRef) {\n      const obj = weakRef.deref();\n      if (!obj) {\n        this.weakRefs.delete(key);\n      }\n      return obj;\n    }\n    return void 0;\n  }\n  /**\n   * 对象被回收时的回调\n   */\n  onObjectFinalized(key) {\n    this.weakRefs.delete(key);\n    this.stats.totalDeallocations++;\n  }\n  /**\n   * 添加GC回调\n   */\n  addGCCallback(callback) {\n    this.gcCallbacks.add(callback);\n  }\n  /**\n   * 移除GC回调\n   */\n  removeGCCallback(callback) {\n    this.gcCallbacks.delete(callback);\n  }\n  /**\n   * 手动触发垃圾回收（建议）\n   */\n  suggestGC() {\n    this.gcCount++;\n    this.lastGCTime = Date.now();\n    this.stats.gcTriggers++;\n    this.pools.forEach((pool) => {\n      const stats = pool.getStats();\n      if (stats.poolSize > Math.max(10, stats.inUseSize)) {\n        pool.clear();\n      }\n    });\n    this.weakRefs.forEach((ref, key) => {\n      if (!ref.deref()) {\n        this.weakRefs.delete(key);\n      }\n    });\n    for (const callback of this.gcCallbacks) {\n      try {\n        callback();\n      } catch (error) {\n        console.error(\"GC callback error:\", error);\n      }\n    }\n    if (typeof window !== \"undefined\" && \"gc\" in window) {\n      try {\n        window.gc?.();\n      } catch {\n      }\n    }\n  }\n  /**\n   * 获取内存统计信息\n   */\n  getMemoryStats() {\n    if (typeof window === \"undefined\" || !performance.memory) {\n      return null;\n    }\n    const memory = performance.memory;\n    if (!memory) return null;\n    return {\n      usedHeapSize: memory.usedJSHeapSize,\n      totalHeapSize: memory.totalJSHeapSize,\n      heapLimit: memory.jsHeapSizeLimit,\n      external: 0,\n      gcCount: this.gcCount,\n      lastGCTime: this.lastGCTime\n    };\n  }\n  /**\n   * 检查内存压力\n   */\n  checkMemoryPressure() {\n    const stats = this.getMemoryStats();\n    if (!stats) return false;\n    const usage = stats.usedHeapSize / stats.heapLimit;\n    if (usage > this.memoryThreshold) {\n      this.stats.memoryPressureEvents++;\n      return true;\n    }\n    return false;\n  }\n  /**\n   * 开始内存监控\n   */\n  startMemoryMonitoring() {\n    if (typeof window === \"undefined\") return;\n    this.memoryCheckInterval = setInterval(() => {\n      if (this.checkMemoryPressure()) {\n        console.warn(\"Memory pressure detected, triggering cleanup\");\n        this.suggestGC();\n      }\n    }, 3e4);\n  }\n  /**\n   * 停止内存监控\n   */\n  stopMemoryMonitoring() {\n    if (this.memoryCheckInterval) {\n      clearInterval(this.memoryCheckInterval);\n      this.memoryCheckInterval = null;\n    }\n  }\n  /**\n   * 获取管理器统计信息\n   */\n  getStats() {\n    const poolStats = {};\n    this.pools.forEach((pool, name) => {\n      poolStats[name] = pool.getStats();\n    });\n    return {\n      ...this.stats,\n      pools: poolStats,\n      weakRefs: this.weakRefs.size,\n      gcCallbacks: this.gcCallbacks.size,\n      memoryStats: this.getMemoryStats()\n    };\n  }\n  /**\n   * 销毁管理器\n   */\n  destroy() {\n    this.stopMemoryMonitoring();\n    this.pools.forEach((pool) => pool.clear());\n    this.pools.clear();\n    this.gcCallbacks.clear();\n    this.weakRefs.clear();\n    _MemoryManager.instance = null;\n  }\n};\n_MemoryManager.instance = null;\nlet MemoryManager = _MemoryManager;\nfunction createReusablePool(name, createFn, resetFn, maxSize = 100) {\n  const manager = MemoryManager.getInstance();\n  return manager.registerPool(name, {\n    maxSize,\n    createFn,\n    resetFn,\n    initialSize: Math.min(10, maxSize)\n  });\n}\nclass SafeTimerManager {\n  constructor() {\n    this.timers = /* @__PURE__ */ new Map();\n    this.intervals = /* @__PURE__ */ new Map();\n  }\n  /**\n   * 设置定时器（自动清理旧的）\n   */\n  setTimeout(key, callback, delay) {\n    this.clearTimeout(key);\n    const timer = setTimeout(() => {\n      this.timers.delete(key);\n      callback();\n    }, delay);\n    this.timers.set(key, timer);\n  }\n  /**\n   * 清理定时器\n   */\n  clearTimeout(key) {\n    const timer = this.timers.get(key);\n    if (timer) {\n      clearTimeout(timer);\n      this.timers.delete(key);\n    }\n  }\n  /**\n   * 设置间隔定时器\n   */\n  setInterval(key, callback, interval) {\n    this.clearInterval(key);\n    const timer = setInterval(callback, interval);\n    this.intervals.set(key, timer);\n  }\n  /**\n   * 清理间隔定时器\n   */\n  clearInterval(key) {\n    const timer = this.intervals.get(key);\n    if (timer) {\n      clearInterval(timer);\n      this.intervals.delete(key);\n    }\n  }\n  /**\n   * 清理所有定时器\n   */\n  clearAll() {\n    this.timers.forEach((timer) => clearTimeout(timer));\n    this.intervals.forEach((timer) => clearInterval(timer));\n    this.timers.clear();\n    this.intervals.clear();\n  }\n  /**\n   * 获取活跃定时器数量\n   */\n  getActiveCount() {\n    return {\n      timers: this.timers.size,\n      intervals: this.intervals.size\n    };\n  }\n}\nconst memoryManager = MemoryManager.getInstance();\nconst timerManager = new SafeTimerManager();\n\nexport { MemoryManager, ObjectPool, SafeTimerManager, createReusablePool, memoryManager, timerManager };\n/*! End of @ldesign/device | Powered by @ldesign/builder */\n//# sourceMappingURL=MemoryManager.js.map\n"],"names":["ObjectPool","constructor","config","pool","inUse","Set","maxSize","createFn","resetFn","initialSize","Math","min","i","push","acquire","obj","length","popped","pop","add","release","has","delete","clear","getStats","poolSize","inUseSize","size","totalSize","_MemoryManager","pools","Map","memoryCheckInterval","gcCallbacks","memoryThreshold","lastGCTime","gcCount","weakRefs","stats","totalAllocations","totalDeallocations","gcTriggers","memoryPressureEvents","finalizationRegistry","FinalizationRegistry","heldValue","onObjectFinalized","startMemoryMonitoring","getInstance","instance","registerPool","name","Error","set","getPool","get","acquireFromPool","poolName","releaseToPool","registerWeakRef","key","weakRef","WeakRef","register","getWeakRef","deref","addGCCallback","callback","removeGCCallback","suggestGC","Date","now","forEach","max","ref","error","console","window","gc","getMemoryStats","performance","memory","usedHeapSize","usedJSHeapSize","totalHeapSize","totalJSHeapSize","heapLimit","jsHeapSizeLimit","external","checkMemoryPressure","usage","setInterval","warn","stopMemoryMonitoring","clearInterval","poolStats","memoryStats","destroy","MemoryManager","SafeTimerManager","timers","intervals","setTimeout","delay","clearTimeout","timer","interval","clearAll","getActiveCount","memoryManager"],"mappings":"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"}