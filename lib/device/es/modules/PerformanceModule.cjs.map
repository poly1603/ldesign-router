{"version":3,"file":"PerformanceModule.cjs","sources":["../../../../../device/es/modules/PerformanceModule.js"],"sourcesContent":["/*!\n * ***********************************\n * @ldesign/device v0.1.0          *\n * Built with rollup               *\n * Build time: 2024-10-21 14:32:55 *\n * Build mode: production          *\n * Minified: No                    *\n * ***********************************\n */\nimport { EventEmitter } from '../core/EventEmitter.js';\n\nclass PerformanceModule extends EventEmitter {\n  constructor() {\n    super(...arguments);\n    this.name = \"performance\";\n    this.performanceInfo = null;\n    this.isInitialized = false;\n    this.isTesting = false;\n  }\n  /**\n   * 初始化模块\n   */\n  async init() {\n    if (this.isInitialized) return;\n    this.performanceInfo = await this.runPerformanceTest();\n    this.isInitialized = true;\n  }\n  /**\n   * 获取性能数据\n   */\n  getData() {\n    if (!this.performanceInfo) {\n      throw new Error(\"PerformanceModule not initialized\");\n    }\n    return {\n      ...this.performanceInfo\n    };\n  }\n  /**\n   * 获取性能评分\n   */\n  getScore() {\n    return this.performanceInfo?.score ?? 0;\n  }\n  /**\n   * 获取性能等级\n   */\n  getTier() {\n    return this.performanceInfo?.tier ?? \"medium\";\n  }\n  /**\n   * 重新运行性能测试\n   */\n  async runTest(options) {\n    if (this.isTesting) {\n      throw new Error(\"Performance test already running\");\n    }\n    this.isTesting = true;\n    this.emit(\"testStart\", void 0);\n    try {\n      this.performanceInfo = await this.runPerformanceTest(options);\n      this.emit(\"testComplete\", this.performanceInfo);\n      this.emit(\"performanceChange\", this.performanceInfo);\n      return this.performanceInfo;\n    } finally {\n      this.isTesting = false;\n    }\n  }\n  /**\n   * 销毁模块\n   */\n  async destroy() {\n    this.removeAllListeners();\n    this.performanceInfo = null;\n    this.isInitialized = false;\n  }\n  /**\n   * 运行性能测试\n   */\n  async runPerformanceTest(options = {}) {\n    const {\n      includeGPU = true,\n      includeNetwork = false,\n      timeout = 5e3\n    } = options;\n    const hardware = this.detectHardware();\n    const [cpuScore, gpuScore, memoryScore, networkScore, storageScore] = await Promise.all([this.testCPUPerformance(timeout, hardware.cpuCores), includeGPU ? this.testGPUPerformance(timeout) : Promise.resolve(50), this.testMemoryPerformance(hardware.deviceMemory), includeNetwork ? this.testNetworkPerformance(timeout) : Promise.resolve(50), this.testStoragePerformance(timeout)]);\n    const metrics = {\n      cpu: cpuScore,\n      gpu: gpuScore,\n      memory: memoryScore,\n      network: networkScore,\n      storage: storageScore\n    };\n    const weights = {\n      cpu: 0.3,\n      gpu: 0.25,\n      memory: 0.2,\n      network: 0.1,\n      storage: 0.15\n    };\n    const score = Math.round(cpuScore * weights.cpu + gpuScore * weights.gpu + memoryScore * weights.memory + networkScore * weights.network + storageScore * weights.storage);\n    const tier = this.calculateTier(score);\n    const recommendations = this.generateRecommendations(metrics, tier);\n    return {\n      score,\n      tier,\n      metrics,\n      hardware,\n      recommendations,\n      timestamp: Date.now()\n    };\n  }\n  /**\n   * 检测硬件信息\n   */\n  detectHardware() {\n    return {\n      cpuCores: navigator.hardwareConcurrency || 1,\n      deviceMemory: navigator.deviceMemory || 4,\n      maxTouchPoints: navigator.maxTouchPoints || 0\n    };\n  }\n  /**\n   * 测试 CPU 性能\n   * 使用数学密集型计算进行基准测试\n   */\n  async testCPUPerformance(_timeout, cores) {\n    return new Promise((resolve) => {\n      const startTime = performance.now();\n      const duration = performance.now() - startTime;\n      const benchmarkScore = Math.max(0, Math.min(100, (500 - duration) / 4.5));\n      const coreScore = Math.min(100, cores / 8 * 100);\n      const finalScore = Math.round(coreScore * 0.4 + benchmarkScore * 0.6);\n      resolve(finalScore);\n    });\n  }\n  /**\n   * 测试 GPU 性能\n   * 结合 WebGL 渲染测试和 Canvas 2D 测试\n   */\n  async testGPUPerformance(timeout) {\n    try {\n      const canvas2DScore = await this.testCanvas2DPerformance();\n      const canvas = document.createElement(\"canvas\");\n      canvas.width = 256;\n      canvas.height = 256;\n      const gl = canvas.getContext(\"webgl2\") || canvas.getContext(\"webgl\");\n      if (!gl) {\n        return Math.round(canvas2DScore * 0.8);\n      }\n      const startTime = performance.now();\n      let frames = 0;\n      const maxFrames = 100;\n      const webglScore = await new Promise((resolve) => {\n        const render = () => {\n          if (!gl) {\n            resolve(30);\n            return;\n          }\n          gl.clearColor(Math.random(), Math.random(), Math.random(), 1);\n          gl.clear(gl.COLOR_BUFFER_BIT);\n          frames++;\n          const elapsed = performance.now() - startTime;\n          if (elapsed >= timeout || frames >= maxFrames) {\n            const fps = frames / elapsed * 1e3;\n            const score = Math.min(100, fps / 60 * 100);\n            resolve(score);\n          } else {\n            requestAnimationFrame(render);\n          }\n        };\n        render();\n      });\n      const webglBonus = 10;\n      return Math.min(100, Math.round(canvas2DScore * 0.4 + webglScore * 0.6 + webglBonus));\n    } catch {\n      return 30;\n    }\n  }\n  /**\n   * 测试 Canvas 2D 渲染性能\n   */\n  async testCanvas2DPerformance() {\n    try {\n      const canvas = document.createElement(\"canvas\");\n      canvas.width = 800;\n      canvas.height = 600;\n      const ctx = canvas.getContext(\"2d\");\n      if (!ctx) return 50;\n      const startTime = performance.now();\n      for (let i = 0; i < 1e3; i++) {\n        ctx.fillStyle = `rgb(${i % 255}, ${i * 2 % 255}, ${i * 3 % 255})`;\n        ctx.fillRect(Math.random() * 800, Math.random() * 600, Math.random() * 50, Math.random() * 50);\n      }\n      const duration = performance.now() - startTime;\n      return Math.max(0, Math.min(100, (200 - duration) / 1.8));\n    } catch {\n      return 50;\n    }\n  }\n  /**\n   * 测试内存性能\n   * 结合设备内存容量和实际性能测试\n   */\n  async testMemoryPerformance(deviceMemory) {\n    try {\n      const arraySize = 1e6;\n      const startTime = performance.now();\n      const arr = Array.from({\n        length: arraySize\n      });\n      for (let i = 0; i < arraySize; i++) {\n        arr[i] = Math.random();\n      }\n      arr.sort((a, b) => a - b);\n      const duration = performance.now() - startTime;\n      arr.length = 0;\n      const benchmarkScore = Math.max(0, Math.min(100, (1e3 - duration) / 9));\n      const memoryCapacityScore = Math.min(100, deviceMemory / 16 * 100);\n      return Math.round(memoryCapacityScore * 0.5 + benchmarkScore * 0.5);\n    } catch {\n      if (deviceMemory >= 8) return 100;\n      if (deviceMemory >= 6) return 85;\n      if (deviceMemory >= 4) return 70;\n      if (deviceMemory >= 2) return 50;\n      return 30;\n    }\n  }\n  /**\n   * 测试网络性能\n   */\n  async testNetworkPerformance(_timeout) {\n    try {\n      const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;\n      if (!connection) return 70;\n      const effectiveType = connection.effectiveType || \"4g\";\n      const downlink = connection.downlink || 0;\n      const typeScores = {\n        \"slow-2g\": 20,\n        \"2g\": 40,\n        \"3g\": 60,\n        \"4g\": 85,\n        \"5g\": 100\n      };\n      const typeScore = typeScores[effectiveType] || 70;\n      if (downlink > 0) {\n        const speedScore = Math.min(100, downlink / 10 * 100);\n        return Math.round((typeScore + speedScore) / 2);\n      }\n      return typeScore;\n    } catch {\n      return 70;\n    }\n  }\n  /**\n   * 测试存储性能\n   * 测试 localStorage 读写性能\n   */\n  async testStoragePerformance(_timeout) {\n    try {\n      const testKey = \"__perf_test_storage__\";\n      const testData = \"x\".repeat(1e4);\n      const startTime = performance.now();\n      for (let i = 0; i < 10; i++) {\n        localStorage.setItem(testKey, testData);\n        localStorage.getItem(testKey);\n      }\n      localStorage.removeItem(testKey);\n      const duration = performance.now() - startTime;\n      const benchmarkScore = Math.max(0, Math.min(100, (50 - duration) / 0.45));\n      let apiBonus = 0;\n      if (\"indexedDB\" in window) apiBonus += 5;\n      if (\"caches\" in window) apiBonus += 5;\n      return Math.min(100, Math.round(benchmarkScore + apiBonus));\n    } catch {\n      return 50;\n    }\n  }\n  /**\n   * 计算性能等级\n   */\n  calculateTier(score) {\n    if (score >= 80) return \"ultra\";\n    if (score >= 60) return \"high\";\n    if (score >= 40) return \"medium\";\n    return \"low\";\n  }\n  /**\n   * 生成性能建议\n   * 提供更详细和实用的优化建议\n   */\n  generateRecommendations(metrics, tier) {\n    const recommendations = [];\n    if (tier === \"low\") {\n      recommendations.push(\"\\u8BBE\\u5907\\u6027\\u80FD\\u8F83\\u4F4E\\uFF0C\\u5EFA\\u8BAE\\u964D\\u4F4E\\u6574\\u4F53\\u56FE\\u5F62\\u8D28\\u91CF\\u548C\\u5173\\u95ED\\u975E\\u5FC5\\u8981\\u52A8\\u753B\\u6548\\u679C\");\n      recommendations.push(\"\\u5EFA\\u8BAE\\u51CF\\u5C11\\u540C\\u65F6\\u8FD0\\u884C\\u7684\\u4EFB\\u52A1\\u548C\\u540E\\u53F0\\u8FDB\\u7A0B\");\n    }\n    if (metrics.cpu < 50) {\n      recommendations.push(\"\\u964D\\u4F4EJavaScript\\u8BA1\\u7B97\\u590D\\u6742\\u5EA6\\uFF0C\\u4F7F\\u7528Web Workers\\u5904\\u7406\\u5BC6\\u96C6\\u578B\\u8BA1\\u7B97\\u4EFB\\u52A1\");\n      recommendations.push(\"\\u907F\\u514D\\u5728\\u4E3B\\u7EBF\\u7A0B\\u4E2D\\u6267\\u884C\\u590D\\u6742\\u7684\\u6570\\u636E\\u5904\\u7406\\u64CD\\u4F5C\");\n    } else if (metrics.cpu < 70) {\n      recommendations.push(\"\\u6CE8\\u610F\\u4F18\\u5316JavaScript\\u6267\\u884C\\u6548\\u7387\\uFF0C\\u907F\\u514D\\u4E0D\\u5FC5\\u8981\\u7684\\u590D\\u6742\\u8BA1\\u7B97\");\n    }\n    if (metrics.gpu < 50) {\n      recommendations.push(\"\\u51CF\\u5C11DOM\\u64CD\\u4F5C\\u548C\\u91CD\\u7ED8\\u6B21\\u6570\\uFF0C\\u4F7F\\u7528CSS\\u52A8\\u753B\\u4EE3\\u66FFJavaScript\\u52A8\\u753B\");\n      recommendations.push(\"\\u964D\\u4F4ECanvas\\u6E32\\u67D3\\u8D28\\u91CF\\uFF0C\\u51CF\\u5C11\\u540C\\u65F6\\u6E32\\u67D3\\u7684\\u56FE\\u5F62\\u5143\\u7D20\\u6570\\u91CF\");\n    } else if (metrics.gpu < 70) {\n      recommendations.push(\"\\u4F18\\u5316\\u56FE\\u5F62\\u6E32\\u67D3\\u6027\\u80FD\\uFF0C\\u6CE8\\u610F\\u63A7\\u5236\\u52A8\\u753B\\u5E27\\u7387\");\n    }\n    if (metrics.memory < 50) {\n      recommendations.push(\"\\u51CF\\u5C11\\u5185\\u5B58\\u5360\\u7528\\uFF0C\\u53CA\\u65F6\\u6E05\\u7406\\u4E0D\\u7528\\u7684\\u5BF9\\u8C61\\u548C\\u5927\\u6570\\u7EC4\");\n      recommendations.push(\"\\u907F\\u514D\\u5185\\u5B58\\u6CC4\\u6F0F\\uFF0C\\u6CE8\\u610F\\u89E3\\u9664\\u4E8B\\u4EF6\\u76D1\\u542C\\u548C\\u5B9A\\u65F6\\u5668\");\n    } else if (metrics.memory < 70) {\n      recommendations.push(\"\\u6CE8\\u610F\\u5185\\u5B58\\u4F7F\\u7528\\u6548\\u7387\\uFF0C\\u907F\\u514D\\u521B\\u5EFA\\u8FC7\\u591A\\u7684\\u4E34\\u65F6\\u5BF9\\u8C61\");\n    }\n    if (metrics.network < 50) {\n      recommendations.push(\"\\u4F18\\u5316\\u8D44\\u6E90\\u52A0\\u8F7D\\u7B56\\u7565\\uFF0C\\u542F\\u7528Gzip\\u538B\\u7F29\\u548C\\u6D4F\\u89C8\\u5668\\u7F13\\u5B58\");\n      recommendations.push(\"\\u51CF\\u5C11\\u7F51\\u7EDC\\u8BF7\\u6C42\\u6B21\\u6570\\uFF0C\\u8003\\u8651\\u4F7F\\u7528CDN\\u52A0\\u901F\\u9759\\u6001\\u8D44\\u6E90\");\n      recommendations.push(\"\\u542F\\u7528\\u61D2\\u52A0\\u8F7D\\u548C\\u9884\\u52A0\\u8F7D\\u7B56\\u7565\\uFF0C\\u4F18\\u5316\\u9996\\u5C4F\\u52A0\\u8F7D\\u65F6\\u95F4\");\n    } else if (metrics.network < 70) {\n      recommendations.push(\"\\u7F51\\u7EDC\\u6027\\u80FD\\u4E00\\u822C\\uFF0C\\u5EFA\\u8BAE\\u4F18\\u5316\\u8D44\\u6E90\\u52A0\\u8F7D\\u548C\\u4F7F\\u7528\\u7F13\\u5B58\\u7B56\\u7565\");\n    }\n    if (metrics.storage < 50) {\n      recommendations.push(\"\\u51CF\\u5C11localStorage\\u7684\\u4F7F\\u7528\\u9891\\u7387\\uFF0C\\u8003\\u8651\\u4F7F\\u7528IndexedDB\\u5B58\\u50A8\\u5927\\u91CF\\u6570\\u636E\");\n      recommendations.push(\"\\u4F18\\u5316\\u6570\\u636E\\u5B58\\u50A8\\u7B56\\u7565\\uFF0C\\u907F\\u514D\\u9891\\u7E41\\u7684\\u8BFB\\u5199\\u64CD\\u4F5C\");\n    } else if (metrics.storage < 70) {\n      recommendations.push(\"\\u6CE8\\u610F\\u5B58\\u50A8\\u6027\\u80FD\\uFF0C\\u907F\\u514D\\u8FC7\\u5EA6\\u4F7F\\u7528localStorage\");\n    }\n    if (tier === \"ultra\") {\n      recommendations.push(\"\\u8BBE\\u5907\\u6027\\u80FD\\u4F18\\u79C0\\uFF0C\\u53EF\\u4EE5\\u542F\\u7528\\u6240\\u6709\\u9AD8\\u7EA7\\u7279\\u6027\\u548C\\u9AD8\\u8D28\\u91CF\\u56FE\\u5F62\\u6548\\u679C\");\n    } else if (tier === \"high\") {\n      recommendations.push(\"\\u8BBE\\u5907\\u6027\\u80FD\\u826F\\u597D\\uFF0C\\u53EF\\u4EE5\\u542F\\u7528\\u5927\\u90E8\\u5206\\u9AD8\\u7EA7\\u7279\\u6027\");\n    }\n    if (recommendations.length === 0) {\n      recommendations.push(\"\\u8BBE\\u5907\\u6027\\u80FD\\u8868\\u73B0\\u826F\\u597D\\uFF0C\\u53EF\\u4EE5\\u6B63\\u5E38\\u4F7F\\u7528\\u5404\\u9879\\u529F\\u80FD\");\n    }\n    return recommendations;\n  }\n}\n\nexport { PerformanceModule };\n/*! End of @ldesign/device | Powered by @ldesign/builder */\n//# sourceMappingURL=PerformanceModule.js.map\n"],"names":["PerformanceModule","EventEmitter","constructor","arguments","name","performanceInfo","isInitialized","isTesting","init","runPerformanceTest","getData","Error","getScore","score","getTier","tier","runTest","options","emit","destroy","removeAllListeners","includeGPU","includeNetwork","timeout","hardware","detectHardware","cpuScore","gpuScore","memoryScore","networkScore","storageScore","Promise","all","testCPUPerformance","cpuCores","testGPUPerformance","resolve","testMemoryPerformance","deviceMemory","testNetworkPerformance","testStoragePerformance","metrics","cpu","gpu","memory","network","storage","weights","Math","round","calculateTier","recommendations","generateRecommendations","timestamp","Date","now","navigator","hardwareConcurrency","maxTouchPoints","_timeout","cores","startTime","performance","duration","benchmarkScore","max","min","coreScore","finalScore","canvas2DScore","testCanvas2DPerformance","canvas","document","createElement","width","height","gl","getContext","frames","maxFrames","webglScore","render","clearColor","random","clear","COLOR_BUFFER_BIT","elapsed","fps","requestAnimationFrame","webglBonus","ctx","i","fillStyle","fillRect","arraySize","arr","Array","from","length","sort","a","b","memoryCapacityScore","connection","mozConnection","webkitConnection","effectiveType","downlink","typeScores","typeScore","speedScore","testKey","testData","repeat","localStorage","setItem","getItem","removeItem","apiBonus","window","push"],"mappings":"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"}