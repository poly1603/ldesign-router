{"version":3,"file":"ModuleLoader.cjs","sources":["../../../../../device/es/core/ModuleLoader.js"],"sourcesContent":["/*!\n * ***********************************\n * @ldesign/device v0.1.0          *\n * Built with rollup               *\n * Build time: 2024-10-21 14:32:55 *\n * Build mode: production          *\n * Minified: No                    *\n * ***********************************\n */\nimport process from 'node:process';\nimport { asyncPool } from '../utils/index.js';\n\nclass ModuleLoader {\n  constructor() {\n    this.modules = /* @__PURE__ */ new Map();\n    this.loadingPromises = /* @__PURE__ */ new Map();\n    // 模块依赖关系映射\n    this.dependencies = /* @__PURE__ */ new Map();\n    // 模块优先级\n    this.priorities = /* @__PURE__ */ new Map();\n    // 性能监控\n    this.loadingStats = /* @__PURE__ */ new Map();\n    // 错误处理\n    this.maxRetries = 3;\n    this.retryDelay = 1e3;\n    // 统计信息清理\n    this.maxStatsEntries = 50;\n    // 最多保留50个模块的统计信息\n    this.statsCleanupThreshold = 100;\n  }\n  // 当统计信息超过100条时触发清理\n  /**\n   * 加载模块并返回数据\n   */\n  async load(name) {\n    if (this.modules.has(name)) {\n      const module = this.modules.get(name);\n      if (!module) throw new Error(`Module ${name} not found`);\n      return module.getData();\n    }\n    if (this.loadingPromises.has(name)) {\n      const promise = this.loadingPromises.get(name);\n      if (!promise) throw new Error(`Loading promise for ${name} not found`);\n      return promise;\n    }\n    const loadingPromise = this.loadModule(name);\n    this.loadingPromises.set(name, loadingPromise);\n    try {\n      const module = await loadingPromise;\n      this.modules.set(name, module);\n      this.loadingPromises.delete(name);\n      return module.getData();\n    } catch (error) {\n      this.loadingPromises.delete(name);\n      throw error;\n    }\n  }\n  /**\n   * 加载模块并返回模块实例\n   */\n  async loadModuleInstance(name) {\n    if (this.modules.has(name)) {\n      const module = this.modules.get(name);\n      if (!module) throw new Error(`Module ${name} not found`);\n      return module;\n    }\n    if (this.loadingPromises.has(name)) {\n      const promise = this.loadingPromises.get(name);\n      if (promise) await promise;\n      const module = this.modules.get(name);\n      if (!module) throw new Error(`Module ${name} not found after loading`);\n      return module;\n    }\n    const loadingPromise = this.loadModule(name);\n    this.loadingPromises.set(name, loadingPromise);\n    try {\n      const module = await loadingPromise;\n      this.modules.set(name, module);\n      this.loadingPromises.delete(name);\n      return module;\n    } catch (error) {\n      this.loadingPromises.delete(name);\n      throw error;\n    }\n  }\n  /**\n   * 卸载模块\n   */\n  async unload(name) {\n    const module = this.modules.get(name);\n    if (!module) return;\n    try {\n      await module.destroy();\n    } catch (error) {\n      console.error(`Error destroying module \"${name}\":`, error);\n    } finally {\n      this.modules.delete(name);\n    }\n  }\n  /**\n   * 检查模块是否已加载\n   */\n  isLoaded(name) {\n    return this.modules.has(name);\n  }\n  /**\n   * 获取已加载的模块\n   */\n  getModule(name) {\n    return this.modules.get(name);\n  }\n  /**\n   * 获取所有已加载的模块名称\n   */\n  getLoadedModules() {\n    return Array.from(this.modules.keys());\n  }\n  /**\n   * 卸载模块（别名方法，用于测试兼容性）\n   */\n  async unloadModule(name) {\n    return this.unload(name);\n  }\n  /**\n   * 卸载所有模块\n   */\n  async unloadAll() {\n    const unloadPromises = Array.from(this.modules.keys()).map((name) => this.unload(name));\n    await Promise.all(unloadPromises);\n  }\n  /**\n   * 卸载所有模块（别名方法，用于测试兼容性）\n   */\n  async unloadAllModules() {\n    return this.unloadAll();\n  }\n  /**\n   * 检查模块是否已加载（别名方法，用于测试兼容性）\n   */\n  isModuleLoaded(name) {\n    return this.isLoaded(name);\n  }\n  /**\n   * 获取模块加载统计信息\n   */\n  getLoadingStats(name) {\n    if (name) {\n      return this.loadingStats.get(name);\n    }\n    return Object.fromEntries(this.loadingStats.entries());\n  }\n  /**\n   * 清理统计信息\n   *\n   * 优化: 防止统计信息无限增长\n   */\n  clearStats(name) {\n    if (name) {\n      this.loadingStats.delete(name);\n    } else {\n      this.loadingStats.clear();\n    }\n  }\n  /**\n   * 清理旧的统计信息\n   *\n   * 当统计信息过多时,只保留最近使用的模块统计（优化版本）\n   */\n  cleanupOldStats() {\n    if (this.loadingStats.size <= this.statsCleanupThreshold) {\n      return;\n    }\n    const entries = Array.from(this.loadingStats.entries());\n    entries.sort((a, b) => b[1].lastLoadTime - a[1].lastLoadTime);\n    this.loadingStats.clear();\n    const keepCount = Math.min(this.maxStatsEntries, entries.length);\n    for (let i = 0; i < keepCount; i++) {\n      const [name, stats] = entries[i];\n      this.loadingStats.set(name, stats);\n    }\n  }\n  /**\n   * 实际加载模块的方法\n   */\n  async loadModule(name) {\n    const startTime = performance.now();\n    let retries = 0;\n    while (retries <= this.maxRetries) {\n      try {\n        let module;\n        switch (name) {\n          case \"network\":\n            module = await this.loadNetworkModule();\n            break;\n          case \"battery\":\n            module = await this.loadBatteryModule();\n            break;\n          case \"geolocation\":\n            module = await this.loadGeolocationModule();\n            break;\n          case \"feature\":\n            module = await this.loadFeatureDetectionModule();\n            break;\n          case \"performance\":\n            module = await this.loadPerformanceModule();\n            break;\n          case \"media\":\n            module = await this.loadMediaModule();\n            break;\n          default:\n            throw new Error(`Unknown module: ${name}`);\n        }\n        this.updateLoadingStats(name, Math.max(1, performance.now() - startTime), false);\n        return module;\n      } catch (error) {\n        if (error instanceof Error && /Unknown module:/.test(error.message)) {\n          this.updateLoadingStats(name, Math.max(1, performance.now() - startTime), true);\n          throw error;\n        }\n        retries++;\n        this.updateLoadingStats(name, Math.max(1, performance.now() - startTime), true);\n        if (retries > this.maxRetries) {\n          throw new Error(`Failed to load module \"${name}\" after ${this.maxRetries} retries: ${error}`);\n        }\n        const delay = typeof process !== \"undefined\" && process.env && process.env.VITEST ? 10 * retries : this.retryDelay * retries;\n        await new Promise((resolve) => setTimeout(resolve, delay));\n      }\n    }\n    throw new Error(`Failed to load module \"${name}\"`);\n  }\n  /**\n   * 加载网络信息模块\n   */\n  async loadNetworkModule() {\n    const {\n      NetworkModule\n    } = await import('../modules/NetworkModule.js');\n    const module = new NetworkModule();\n    await module.init();\n    return module;\n  }\n  /**\n   * 加载电池信息模块\n   */\n  async loadBatteryModule() {\n    const {\n      BatteryModule\n    } = await import('../modules/BatteryModule.js');\n    const module = new BatteryModule();\n    await module.init();\n    return module;\n  }\n  /**\n   * 加载地理位置模块\n   */\n  async loadGeolocationModule() {\n    const {\n      GeolocationModule\n    } = await import('../modules/GeolocationModule.js');\n    const module = new GeolocationModule();\n    await module.init();\n    return module;\n  }\n  /**\n   * 加载特性检测模块\n   */\n  async loadFeatureDetectionModule() {\n    const {\n      FeatureDetectionModule\n    } = await import('../modules/FeatureDetectionModule.js');\n    const module = new FeatureDetectionModule();\n    await module.init();\n    return module;\n  }\n  /**\n   * 加载性能评估模块\n   */\n  async loadPerformanceModule() {\n    const {\n      PerformanceModule\n    } = await import('../modules/PerformanceModule.js');\n    const module = new PerformanceModule();\n    await module.init();\n    return module;\n  }\n  /**\n   * 加载媒体设备模块\n   */\n  async loadMediaModule() {\n    const {\n      MediaModule\n    } = await import('../modules/MediaModule.js');\n    const module = new MediaModule();\n    await module.init();\n    return module;\n  }\n  /**\n   * 更新加载统计信息\n   */\n  updateLoadingStats(name, loadTime, isError) {\n    if (!this.loadingStats.has(name)) {\n      this.loadingStats.set(name, {\n        loadCount: 0,\n        totalLoadTime: 0,\n        averageLoadTime: 0,\n        lastLoadTime: 0,\n        errors: 0\n      });\n    }\n    const stats = this.loadingStats.get(name);\n    if (!stats) return;\n    const safeLoadTime = Math.max(1, Math.floor(loadTime));\n    if (isError) {\n      stats.errors++;\n    } else {\n      stats.loadCount++;\n      stats.totalLoadTime += safeLoadTime;\n      stats.averageLoadTime = stats.totalLoadTime / stats.loadCount;\n    }\n    stats.lastLoadTime = safeLoadTime;\n    this.cleanupOldStats();\n  }\n  /**\n   * 设置模块依赖关系\n   * \n   * @param name - 模块名称\n   * @param deps - 依赖的模块列表\n   */\n  setDependencies(name, deps) {\n    this.dependencies.set(name, deps);\n  }\n  /**\n   * 设置模块优先级\n   * \n   * @param name - 模块名称\n   * @param priority - 优先级（数字越大优先级越高）\n   */\n  setPriority(name, priority) {\n    this.priorities.set(name, priority);\n  }\n  /**\n   * 预加载模块（在后台加载，不阻塞）\n   * \n   * @param names - 要预加载的模块名称列表\n   */\n  async preload(names) {\n    const sortedNames = names.sort((a, b) => {\n      const priorityA = this.priorities.get(a) || 0;\n      const priorityB = this.priorities.get(b) || 0;\n      return priorityB - priorityA;\n    });\n    const toLoad = this.resolveDependencies(sortedNames);\n    const needLoad = toLoad.filter((name) => !this.isLoaded(name));\n    if (needLoad.length === 0) {\n      return;\n    }\n    try {\n      await asyncPool(3, needLoad, async (name) => {\n        if (!this.isLoaded(name)) {\n          await this.loadModuleInstance(name);\n        }\n      });\n    } catch (error) {\n      console.warn(\"Preload failed for some modules:\", error);\n    }\n  }\n  /**\n   * 批量加载模块（并行加载）\n   * \n   * @param names - 要加载的模块名称列表\n   * @param concurrency - 并发数（默认3）\n   * @returns Promise<模块实例数组>\n   */\n  async loadMultiple(names, concurrency = 3) {\n    const toLoad = this.resolveDependencies(names);\n    const modules = await asyncPool(concurrency, toLoad, async (name) => {\n      return this.loadModuleInstance(name);\n    });\n    return modules;\n  }\n  /**\n   * 解析模块依赖关系（拓扑排序）\n   * \n   * @param names - 模块名称列表\n   * @returns 排序后的模块名称列表\n   */\n  resolveDependencies(names) {\n    const result = [];\n    const visited = /* @__PURE__ */ new Set();\n    const visiting = /* @__PURE__ */ new Set();\n    const visit = (name) => {\n      if (visited.has(name)) return;\n      if (visiting.has(name)) {\n        throw new Error(`Circular dependency detected: ${name}`);\n      }\n      visiting.add(name);\n      const deps = this.dependencies.get(name) || [];\n      for (const dep of deps) {\n        visit(dep);\n      }\n      visiting.delete(name);\n      visited.add(name);\n      result.push(name);\n    };\n    for (const name of names) {\n      visit(name);\n    }\n    return result;\n  }\n}\n\nexport { ModuleLoader };\n/*! End of @ldesign/device | Powered by @ldesign/builder */\n//# sourceMappingURL=ModuleLoader.js.map\n"],"names":["ModuleLoader","constructor","modules","Map","loadingPromises","dependencies","priorities","loadingStats","maxRetries","retryDelay","maxStatsEntries","statsCleanupThreshold","load","name","has","module","get","Error","getData","promise","loadingPromise","loadModule","set","delete","error","loadModuleInstance","unload","destroy","console","isLoaded","getModule","getLoadedModules","Array","from","keys","unloadModule","unloadAll","unloadPromises","map","Promise","all","unloadAllModules","isModuleLoaded","getLoadingStats","Object","fromEntries","entries","clearStats","clear","cleanupOldStats","size","sort","a","b","lastLoadTime","keepCount","Math","min","length","i","stats","startTime","performance","now","retries","loadNetworkModule","loadBatteryModule","loadGeolocationModule","loadFeatureDetectionModule","loadPerformanceModule","loadMediaModule","updateLoadingStats","max","test","message","delay","process","env","VITEST","resolve","setTimeout","NetworkModule","init","BatteryModule","GeolocationModule","FeatureDetectionModule","PerformanceModule","MediaModule","loadTime","isError","loadCount","totalLoadTime","averageLoadTime","errors","safeLoadTime","floor","setDependencies","deps","setPriority","priority","preload","names","sortedNames","priorityA","priorityB","toLoad","resolveDependencies","needLoad","filter","asyncPool","warn","loadMultiple","concurrency","result","visited","Set","visiting","visit","add","dep","push"],"mappings":"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"}