{"version":3,"file":"EventEmitter.cjs","sources":["../../../../../device/es/core/EventEmitter.js"],"sourcesContent":["/*!\n * ***********************************\n * @ldesign/device v0.1.0          *\n * Built with rollup               *\n * Build time: 2024-10-21 14:32:55 *\n * Build mode: production          *\n * Minified: No                    *\n * ***********************************\n */\nclass EventEmitter {\n  constructor() {\n    this.events = /* @__PURE__ */ new Map();\n    this.maxListeners = 100;\n    this.wildcardListeners = [];\n    // 通配符监听器\n    this.isSorted = /* @__PURE__ */ new Map();\n    // 记录是否已排序\n    // 性能监控\n    this.performanceMetrics = {\n      totalEmits: 0,\n      totalListenerCalls: 0,\n      errors: 0,\n      averageListenersPerEvent: 0\n    };\n    // 是否启用性能监控\n    this.enablePerformanceTracking = false;\n  }\n  /**\n   * 设置最大监听器数量\n   */\n  setMaxListeners(max) {\n    this.maxListeners = max;\n    return this;\n  }\n  /**\n   * 设置错误处理器\n   */\n  setErrorHandler(handler) {\n    this.errorHandler = handler;\n    return this;\n  }\n  /**\n   * 启用性能监控\n   */\n  enablePerformanceMonitoring(enable = true) {\n    this.enablePerformanceTracking = enable;\n    return this;\n  }\n  /**\n   * 获取性能指标\n   */\n  getPerformanceMetrics() {\n    return {\n      ...this.performanceMetrics\n    };\n  }\n  /**\n   * 重置性能指标\n   */\n  resetPerformanceMetrics() {\n    this.performanceMetrics = {\n      totalEmits: 0,\n      totalListenerCalls: 0,\n      errors: 0,\n      averageListenersPerEvent: 0\n    };\n    return this;\n  }\n  /**\n   * 添加事件监听器（支持优先级和命名空间）\n   * \n   * @param event - 事件名称（支持 '*' 通配符）\n   * @param listener - 监听器函数\n   * @param options - 配置选项\n   * @param options.priority - 优先级（数字越大优先级越高，默认0）\n   * @param options.namespace - 命名空间（用于批量移除）\n   */\n  on(event, listener, options = {}) {\n    const {\n      priority = 0,\n      namespace\n    } = options;\n    const wrapper = {\n      listener,\n      priority,\n      once: false,\n      namespace\n    };\n    if (event === \"*\") {\n      this.wildcardListeners.push(wrapper);\n      return this;\n    }\n    if (!this.events.has(event)) {\n      this.events.set(event, []);\n    }\n    const listeners = this.events.get(event);\n    if (!listeners) return this;\n    if (listeners.length >= this.maxListeners) {\n      console.warn(`Max listeners (${this.maxListeners}) exceeded for event: ${String(event)}. Consider using removeAllListeners() or increasing maxListeners.`);\n    }\n    listeners.push(wrapper);\n    this.isSorted.set(event, false);\n    return this;\n  }\n  /**\n   * 添加一次性事件监听器\n   */\n  once(event, listener, options = {}) {\n    const {\n      priority = 0,\n      namespace\n    } = options;\n    const wrapper = {\n      listener,\n      priority,\n      once: true,\n      namespace\n    };\n    if (event === \"*\") {\n      this.wildcardListeners.push(wrapper);\n      return this;\n    }\n    if (!this.events.has(event)) {\n      this.events.set(event, []);\n    }\n    const listeners = this.events.get(event);\n    if (listeners) {\n      listeners.push(wrapper);\n    }\n    this.isSorted.set(event, false);\n    return this;\n  }\n  /**\n   * 移除事件监听器\n   */\n  off(event, listener) {\n    if (event === \"*\") {\n      if (listener) {\n        this.wildcardListeners = this.wildcardListeners.filter((w) => w.listener !== listener);\n      } else {\n        this.wildcardListeners = [];\n      }\n      return this;\n    }\n    const listeners = this.events.get(event);\n    if (!listeners) return this;\n    if (listener) {\n      const filtered = listeners.filter((w) => w.listener !== listener);\n      if (filtered.length === 0) {\n        this.events.delete(event);\n      } else {\n        this.events.set(event, filtered);\n      }\n    } else {\n      this.events.delete(event);\n    }\n    return this;\n  }\n  /**\n   * 移除指定命名空间的所有监听器\n   */\n  offNamespace(namespace) {\n    for (const [event, listeners] of this.events.entries()) {\n      const filtered = listeners.filter((w) => w.namespace !== namespace);\n      if (filtered.length === 0) {\n        this.events.delete(event);\n      } else {\n        this.events.set(event, filtered);\n      }\n    }\n    this.wildcardListeners = this.wildcardListeners.filter((w) => w.namespace !== namespace);\n    return this;\n  }\n  /**\n   * 移除监听器包装器（内部方法）\n   */\n  removeWrapper(event, wrapper) {\n    if (event === \"*\") {\n      this.wildcardListeners = this.wildcardListeners.filter((w) => w !== wrapper);\n      return;\n    }\n    const listeners = this.events.get(event);\n    if (listeners) {\n      const filtered = listeners.filter((w) => w !== wrapper);\n      if (filtered.length === 0) {\n        this.events.delete(event);\n      } else {\n        this.events.set(event, filtered);\n      }\n    }\n  }\n  /**\n   * 触发事件（支持通配符监听器）\n   *\n   * 优化: 按优先级顺序执行监听器，避免创建新数组\n   */\n  emit(event, data) {\n    const listeners = this.events.get(event);\n    const hasListeners = listeners && listeners.length > 0;\n    const hasWildcard = this.wildcardListeners.length > 0;\n    if (!hasListeners && !hasWildcard) {\n      return this;\n    }\n    if (hasListeners && !this.isSorted.get(event)) {\n      listeners?.sort((a, b) => b.priority - a.priority);\n      this.isSorted.set(event, true);\n    }\n    if (hasWildcard && this.wildcardListeners.length > 1) {\n      this.wildcardListeners.sort((a, b) => b.priority - a.priority);\n    }\n    if (this.enablePerformanceTracking) {\n      const totalListeners = (listeners ? listeners.length : 0) + this.wildcardListeners.length;\n      this.performanceMetrics.totalEmits++;\n      this.performanceMetrics.totalListenerCalls += totalListeners;\n      const alpha = 0.1;\n      this.performanceMetrics.averageListenersPerEvent = this.performanceMetrics.averageListenersPerEvent * (1 - alpha) + totalListeners * alpha;\n    }\n    const toRemove = [];\n    if (listeners) {\n      for (let i = 0; i < listeners.length; i++) {\n        const wrapper = listeners[i];\n        try {\n          wrapper.listener(data);\n          if (wrapper.once) {\n            toRemove.push(wrapper);\n          }\n        } catch (error) {\n          this.handleListenerError(error, event);\n        }\n      }\n    }\n    if (hasWildcard) {\n      for (let i = 0; i < this.wildcardListeners.length; i++) {\n        const wrapper = this.wildcardListeners[i];\n        try {\n          wrapper.listener(data);\n          if (wrapper.once) {\n            toRemove.push(wrapper);\n          }\n        } catch (error) {\n          this.handleListenerError(error, event);\n        }\n      }\n    }\n    if (toRemove.length > 0) {\n      for (let i = 0; i < toRemove.length; i++) {\n        this.removeWrapper(event, toRemove[i]);\n      }\n    }\n    return this;\n  }\n  /**\n   * 获取事件的监听器数量\n   */\n  listenerCount(event) {\n    if (event === \"*\") {\n      return this.wildcardListeners.length;\n    }\n    const listeners = this.events.get(event);\n    return listeners ? listeners.length : 0;\n  }\n  /**\n   * 获取所有事件名称\n   */\n  eventNames() {\n    const names = Array.from(this.events.keys());\n    if (this.wildcardListeners.length > 0) {\n      names.push(\"*\");\n    }\n    return names;\n  }\n  /**\n   * 移除所有事件监听器（支持通配符模式）\n   */\n  removeAllListeners(event) {\n    if (event === \"*\") {\n      this.wildcardListeners = [];\n    } else if (event) {\n      const eventStr = event;\n      if (eventStr.includes(\"*\")) {\n        const prefix = eventStr.replace(\"*\", \"\");\n        const keysToDelete = [];\n        for (const key of this.events.keys()) {\n          if (String(key).startsWith(prefix)) {\n            keysToDelete.push(String(key));\n          }\n        }\n        for (const key of keysToDelete) {\n          this.events.delete(key);\n          this.isSorted.delete(key);\n        }\n      } else {\n        this.events.delete(eventStr);\n        this.isSorted.delete(eventStr);\n      }\n    } else {\n      this.events.clear();\n      this.wildcardListeners = [];\n      this.isSorted.clear();\n    }\n    return this;\n  }\n  /**\n   * 获取指定事件的所有监听器\n   */\n  listeners(event) {\n    if (event === \"*\") {\n      return this.wildcardListeners.map((w) => w.listener);\n    }\n    const listeners = this.events.get(event);\n    return listeners ? listeners.map((w) => w.listener) : [];\n  }\n  /**\n   * 检查是否有指定事件的监听器\n   */\n  hasListeners(event) {\n    return this.listenerCount(event) > 0;\n  }\n  /**\n   * 检测内存泄漏（监听器过多的事件）\n   * \n   * @param threshold - 阈值，默认50\n   * @returns 监听器过多的事件列表\n   */\n  detectMemoryLeaks(threshold = 50) {\n    const leaks = [];\n    for (const [event, listeners] of this.events.entries()) {\n      if (listeners.length > threshold) {\n        leaks.push({\n          event: String(event),\n          count: listeners.length\n        });\n      }\n    }\n    if (this.wildcardListeners.length > threshold) {\n      leaks.push({\n        event: \"*\",\n        count: this.wildcardListeners.length\n      });\n    }\n    return leaks;\n  }\n  /**\n   * 获取所有监听器总数\n   */\n  getTotalListenerCount() {\n    let total = this.wildcardListeners.length;\n    for (const listeners of this.events.values()) {\n      total += listeners.length;\n    }\n    return total;\n  }\n  /**\n   * 处理监听器错误\n   */\n  handleListenerError(error, event) {\n    if (this.enablePerformanceTracking) {\n      this.performanceMetrics.errors++;\n    }\n    const err = error instanceof Error ? error : new Error(String(error));\n    if (this.errorHandler) {\n      this.errorHandler(err, event);\n    } else {\n      console.error(`Error in event listener for \"${event}\":`, err);\n    }\n  }\n}\n\nexport { EventEmitter };\n/*! End of @ldesign/device | Powered by @ldesign/builder */\n//# sourceMappingURL=EventEmitter.js.map\n"],"names":["EventEmitter","constructor","events","Map","maxListeners","wildcardListeners","isSorted","performanceMetrics","totalEmits","totalListenerCalls","errors","averageListenersPerEvent","enablePerformanceTracking","setMaxListeners","max","setErrorHandler","handler","errorHandler","enablePerformanceMonitoring","enable","getPerformanceMetrics","resetPerformanceMetrics","on","event","listener","options","priority","namespace","wrapper","once","push","has","set","listeners","get","length","console","warn","String","off","filter","w","filtered","delete","offNamespace","entries","removeWrapper","emit","data","hasListeners","hasWildcard","sort","a","b","totalListeners","alpha","toRemove","i","error","handleListenerError","listenerCount","eventNames","names","Array","from","keys","removeAllListeners","eventStr","includes","prefix","replace","keysToDelete","key","startsWith","clear","map","detectMemoryLeaks","threshold","leaks","count","getTotalListenerCount","total","values","err","Error"],"mappings":"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"}