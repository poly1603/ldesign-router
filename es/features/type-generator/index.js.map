{"version":3,"file":"index.js","sources":["../../../src/features/type-generator/index.ts"],"sourcesContent":["/**\r\n * @ldesign/router TypeScript 类型自动生成工具\r\n * \r\n * 根据路由配置自动生成类型定义，提升开发效率\r\n */\r\n\r\nimport type { RouteRecordRaw } from '../../types'\r\nimport { existsSync, mkdirSync, writeFileSync } from 'node:fs'\r\nimport { dirname, join } from 'node:path'\r\n\r\n// ==================== 类型定义 ====================\r\n\r\nexport interface TypeGeneratorOptions {\r\n  /**\r\n   * 输出目录\r\n   */\r\n  outputDir?: string\r\n  \r\n  /**\r\n   * 输出文件名\r\n   */\r\n  filename?: string\r\n  \r\n  /**\r\n   * 是否生成枚举\r\n   */\r\n  generateEnums?: boolean\r\n  \r\n  /**\r\n   * 是否生成路径辅助函数\r\n   */\r\n  generateHelpers?: boolean\r\n  \r\n  /**\r\n   * 是否监听变化\r\n   */\r\n  watch?: boolean\r\n  \r\n  /**\r\n   * 自定义类型前缀\r\n   */\r\n  typePrefix?: string\r\n  \r\n  /**\r\n   * 自定义类型后缀\r\n   */\r\n  typeSuffix?: string\r\n  \r\n  /**\r\n   * 格式化选项\r\n   */\r\n  prettier?: boolean | object\r\n}\r\n\r\nexport interface RouteTypeInfo {\r\n  name: string\r\n  path: string\r\n  params?: string[]\r\n  query?: string[]\r\n  meta?: Record<string, any>\r\n}\r\n\r\n// ==================== 类型生成器 ====================\r\n\r\nexport class RouteTypeGenerator {\r\n  private routes: RouteRecordRaw[]\r\n  private options: Required<TypeGeneratorOptions>\r\n  private routeInfos: RouteTypeInfo[] = []\r\n  \r\n  constructor(routes: RouteRecordRaw[], options: TypeGeneratorOptions = {}) {\r\n    this.routes = routes\r\n    this.options = {\r\n      outputDir: './src/types',\r\n      filename: 'routes.generated.ts',\r\n      generateEnums: true,\r\n      generateHelpers: true,\r\n      watch: false,\r\n      typePrefix: '',\r\n      typeSuffix: '',\r\n      prettier: true,\r\n      ...options,\r\n    }\r\n    \r\n    // 解析路由信息\r\n    this.parseRoutes()\r\n  }\r\n  \r\n  /**\r\n   * 解析路由信息\r\n   */\r\n  private parseRoutes(): void {\r\n    this.routeInfos = []\r\n    this.traverseRoutes(this.routes)\r\n  }\r\n  \r\n  /**\r\n   * 遍历路由树\r\n   */\r\n  private traverseRoutes(routes: RouteRecordRaw[], parentPath = ''): void {\r\n    for (const route of routes) {\r\n      const fullPath = this.normalizePath(parentPath, route.path)\r\n      \r\n      if (route.name) {\r\n        const info: RouteTypeInfo = {\r\n          name: String(route.name),\r\n          path: fullPath,\r\n          params: this.extractParams(fullPath),\r\n          query: this.extractQuery(route),\r\n          meta: route.meta,\r\n        }\r\n        \r\n        this.routeInfos.push(info)\r\n      }\r\n      \r\n      // 递归处理子路由\r\n      if (route.children) {\r\n        this.traverseRoutes(route.children, fullPath)\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 标准化路径\r\n   */\r\n  private normalizePath(parent: string, path: string): string {\r\n    if (path.startsWith('/')) {\r\n      return path\r\n    }\r\n    \r\n    const base = parent.endsWith('/') ? parent.slice(0, -1) : parent\r\n    return `${base}/${path}`\r\n  }\r\n  \r\n  /**\r\n   * 提取路径参数\r\n   */\r\n  private extractParams(path: string): string[] {\r\n    const params: string[] = []\r\n    const regex = /:([^/?]+)/g\r\n    let match: RegExpExecArray | null\r\n    \r\n    while ((match = regex.exec(path)) !== null) {\r\n      params.push(match[1].replace(/\\?$/, ''))\r\n    }\r\n    \r\n    return params\r\n  }\r\n  \r\n  /**\r\n   * 提取查询参数\r\n   */\r\n  private extractQuery(route: RouteRecordRaw): string[] {\r\n    // 从 meta 或其他配置中提取预定义的查询参数\r\n    if (route.meta?.query && Array.isArray(route.meta.query)) {\r\n      return route.meta.query\r\n    }\r\n    return []\r\n  }\r\n  \r\n  /**\r\n   * 生成类型定义\r\n   */\r\n  generate(): string {\r\n    const lines: string[] = []\r\n    \r\n    // 文件头\r\n    lines.push('/**')\r\n    lines.push(' * 自动生成的路由类型定义')\r\n    lines.push(' * 请勿手动修改此文件')\r\n    lines.push(` * 生成时间: ${new Date().toISOString()}`)\r\n    lines.push(' */')\r\n    lines.push('')\r\n    \r\n    // 导入类型\r\n    lines.push(\"import type { RouteLocationRaw, RouteParams, RouteQuery } from '@ldesign/router'\")\r\n    lines.push('')\r\n    \r\n    // 生成路由名称类型\r\n    if (this.options.generateEnums) {\r\n      lines.push(...this.generateRouteNamesEnum())\r\n      lines.push('')\r\n    } else {\r\n      lines.push(...this.generateRouteNamesType())\r\n      lines.push('')\r\n    }\r\n    \r\n    // 生成路由参数类型\r\n    lines.push(...this.generateRouteParamsTypes())\r\n    lines.push('')\r\n    \r\n    // 生成路由查询类型\r\n    lines.push(...this.generateRouteQueryTypes())\r\n    lines.push('')\r\n    \r\n    // 生成路由元信息类型\r\n    lines.push(...this.generateRouteMetaTypes())\r\n    lines.push('')\r\n    \r\n    // 生成路由映射类型\r\n    lines.push(...this.generateRouteMap())\r\n    lines.push('')\r\n    \r\n    // 生成辅助函数\r\n    if (this.options.generateHelpers) {\r\n      lines.push(...this.generateHelperFunctions())\r\n      lines.push('')\r\n    }\r\n    \r\n    // 生成类型守卫\r\n    lines.push(...this.generateTypeGuards())\r\n    \r\n    return lines.join('\\n')\r\n  }\r\n  \r\n  /**\r\n   * 生成路由名称枚举\r\n   */\r\n  private generateRouteNamesEnum(): string[] {\r\n    const lines: string[] = []\r\n    \r\n    lines.push(`export enum ${this.options.typePrefix}RouteNames${this.options.typeSuffix} {`)\r\n    \r\n    for (const info of this.routeInfos) {\r\n      const enumKey = this.toConstantCase(info.name)\r\n      lines.push(`  ${enumKey} = '${info.name}',`)\r\n    }\r\n    \r\n    lines.push('}')\r\n    \r\n    return lines\r\n  }\r\n  \r\n  /**\r\n   * 生成路由名称类型\r\n   */\r\n  private generateRouteNamesType(): string[] {\r\n    const lines: string[] = []\r\n    \r\n    const names = this.routeInfos.map(info => `'${info.name}'`).join(' | ')\r\n    lines.push(`export type ${this.options.typePrefix}RouteNames${this.options.typeSuffix} = ${names}`)\r\n    \r\n    return lines\r\n  }\r\n  \r\n  /**\r\n   * 生成路由参数类型\r\n   */\r\n  private generateRouteParamsTypes(): string[] {\r\n    const lines: string[] = []\r\n    \r\n    lines.push(`export interface ${this.options.typePrefix}RouteParams${this.options.typeSuffix} {`)\r\n    \r\n    for (const info of this.routeInfos) {\r\n      if (info.params && info.params.length > 0) {\r\n        const paramType = info.params.map(p => `${p}: string`).join('; ')\r\n        lines.push(`  '${info.name}': { ${paramType} }`)\r\n      } else {\r\n        lines.push(`  '${info.name}': Record<string, never>`)\r\n      }\r\n    }\r\n    \r\n    lines.push('}')\r\n    \r\n    return lines\r\n  }\r\n  \r\n  /**\r\n   * 生成路由查询类型\r\n   */\r\n  private generateRouteQueryTypes(): string[] {\r\n    const lines: string[] = []\r\n    \r\n    lines.push(`export interface ${this.options.typePrefix}RouteQueryParams${this.options.typeSuffix} {`)\r\n    \r\n    for (const info of this.routeInfos) {\r\n      if (info.query && info.query.length > 0) {\r\n        const queryType = info.query.map(q => `${q}?: string`).join('; ')\r\n        lines.push(`  '${info.name}': { ${queryType} }`)\r\n      } else {\r\n        lines.push(`  '${info.name}': Record<string, string | undefined>`)\r\n      }\r\n    }\r\n    \r\n    lines.push('}')\r\n    \r\n    return lines\r\n  }\r\n  \r\n  /**\r\n   * 生成路由元信息类型\r\n   */\r\n  private generateRouteMetaTypes(): string[] {\r\n    const lines: string[] = []\r\n    \r\n    lines.push(`export interface ${this.options.typePrefix}RouteMeta${this.options.typeSuffix} {`)\r\n    \r\n    // 收集所有的 meta 字段\r\n    const metaFields = new Set<string>()\r\n    for (const info of this.routeInfos) {\r\n      if (info.meta) {\r\n        Object.keys(info.meta).forEach(key => metaFields.add(key))\r\n      }\r\n    }\r\n    \r\n    // 生成 meta 类型\r\n    for (const field of metaFields) {\r\n      const fieldType = this.inferMetaFieldType(field)\r\n      lines.push(`  ${field}?: ${fieldType}`)\r\n    }\r\n    \r\n    lines.push('}')\r\n    \r\n    return lines\r\n  }\r\n  \r\n  /**\r\n   * 推断 meta 字段类型\r\n   */\r\n  private inferMetaFieldType(field: string): string {\r\n    // 根据字段名推断类型\r\n    const typeMap: Record<string, string> = {\r\n      title: 'string',\r\n      icon: 'string',\r\n      requiresAuth: 'boolean',\r\n      permissions: 'string[]',\r\n      roles: 'string[]',\r\n      keepAlive: 'boolean',\r\n      hidden: 'boolean',\r\n      order: 'number',\r\n    }\r\n    \r\n    return typeMap[field] || 'any'\r\n  }\r\n  \r\n  /**\r\n   * 生成路由映射\r\n   */\r\n  private generateRouteMap(): string[] {\r\n    const lines: string[] = []\r\n    \r\n    lines.push(`export interface ${this.options.typePrefix}RouteMap${this.options.typeSuffix} {`)\r\n    \r\n    for (const info of this.routeInfos) {\r\n      lines.push(`  '${info.name}': {`)\r\n      lines.push(`    path: '${info.path}'`)\r\n      \r\n      if (info.params && info.params.length > 0) {\r\n        lines.push(`    params: ${this.options.typePrefix}RouteParams${this.options.typeSuffix}['${info.name}']`)\r\n      }\r\n      \r\n      if (info.query && info.query.length > 0) {\r\n        lines.push(`    query: ${this.options.typePrefix}RouteQueryParams${this.options.typeSuffix}['${info.name}']`)\r\n      }\r\n      \r\n      lines.push(`  }`)\r\n    }\r\n    \r\n    lines.push('}')\r\n    \r\n    return lines\r\n  }\r\n  \r\n  /**\r\n   * 生成辅助函数\r\n   */\r\n  private generateHelperFunctions(): string[] {\r\n    const lines: string[] = []\r\n    \r\n    // 生成类型安全的路由导航函数\r\n    lines.push('/**')\r\n    lines.push(' * 类型安全的路由导航')\r\n    lines.push(' */')\r\n    lines.push(`export function typedRoute<T extends ${this.options.typePrefix}RouteNames${this.options.typeSuffix}>(`)\r\n    lines.push('  name: T,')\r\n    lines.push(`  params?: ${this.options.typePrefix}RouteParams${this.options.typeSuffix}[T],`)\r\n    lines.push(`  query?: ${this.options.typePrefix}RouteQueryParams${this.options.typeSuffix}[T]`)\r\n    lines.push('): RouteLocationRaw {')\r\n    lines.push('  return {')\r\n    lines.push('    name,')\r\n    lines.push('    params: params as RouteParams,')\r\n    lines.push('    query: query as RouteQuery,')\r\n    lines.push('  }')\r\n    lines.push('}')\r\n    lines.push('')\r\n    \r\n    // 生成路径构建函数\r\n    lines.push('/**')\r\n    lines.push(' * 构建路由路径')\r\n    lines.push(' */')\r\n    lines.push(`export function buildPath<T extends ${this.options.typePrefix}RouteNames${this.options.typeSuffix}>(`)\r\n    lines.push('  name: T,')\r\n    lines.push(`  params?: ${this.options.typePrefix}RouteParams${this.options.typeSuffix}[T]`)\r\n    lines.push('): string {')\r\n    lines.push(`  const routes: Record<${this.options.typePrefix}RouteNames${this.options.typeSuffix}, string> = {`)\r\n    \r\n    for (const info of this.routeInfos) {\r\n      lines.push(`    '${info.name}': '${info.path}',`)\r\n    }\r\n    \r\n    lines.push('  }')\r\n    lines.push('')\r\n    lines.push('  let path = routes[name]')\r\n    lines.push('  if (params) {')\r\n    lines.push('    Object.entries(params).forEach(([key, value]) => {')\r\n    lines.push('      path = path.replace(`:${key}`, String(value))')\r\n    lines.push('    })')\r\n    lines.push('  }')\r\n    lines.push('  return path')\r\n    lines.push('}')\r\n    \r\n    return lines\r\n  }\r\n  \r\n  /**\r\n   * 生成类型守卫\r\n   */\r\n  private generateTypeGuards(): string[] {\r\n    const lines: string[] = []\r\n    \r\n    lines.push('/**')\r\n    lines.push(' * 检查是否为有效的路由名称')\r\n    lines.push(' */')\r\n    lines.push(`export function isValidRouteName(name: any): name is ${this.options.typePrefix}RouteNames${this.options.typeSuffix} {`)\r\n    lines.push(`  const validNames: ${this.options.typePrefix}RouteNames${this.options.typeSuffix}[] = [`)\r\n    \r\n    for (const info of this.routeInfos) {\r\n      lines.push(`    '${info.name}',`)\r\n    }\r\n    \r\n    lines.push('  ]')\r\n    lines.push('  return validNames.includes(name)')\r\n    lines.push('}')\r\n    \r\n    return lines\r\n  }\r\n  \r\n  /**\r\n   * 转换为常量命名\r\n   */\r\n  private toConstantCase(str: string): string {\r\n    return str\r\n      .replace(/([a-z])([A-Z])/g, '$1_$2')\r\n      .replace(/[\\s-]+/g, '_')\r\n      .toUpperCase()\r\n  }\r\n  \r\n  /**\r\n   * 写入文件\r\n   */\r\n  async write(): Promise<void> {\r\n    const content = this.generate()\r\n    const outputPath = join(this.options.outputDir, this.options.filename)\r\n    \r\n    // 确保目录存在\r\n    const dir = dirname(outputPath)\r\n    if (!existsSync(dir)) {\r\n      mkdirSync(dir, { recursive: true })\r\n    }\r\n    \r\n    // 格式化内容（如果启用）\r\n    let formattedContent = content\r\n    if (this.options.prettier) {\r\n      try {\r\n        const prettier = await import('prettier')\r\n        formattedContent = await prettier.format(content, {\r\n          parser: 'typescript',\r\n          ...(typeof this.options.prettier === 'object' ? this.options.prettier : {}),\r\n        })\r\n      } catch {\r\n        // Prettier 不可用，使用原始内容\r\n      }\r\n    }\r\n    \r\n    // 写入文件\r\n    writeFileSync(outputPath, formattedContent, 'utf-8')\r\n    \r\n    console.log(`✨ 路由类型已生成: ${outputPath}`)\r\n  }\r\n  \r\n  /**\r\n   * 监听路由变化并重新生成\r\n   */\r\n  watch(routes: RouteRecordRaw[]): void {\r\n    if (!this.options.watch) return\r\n    \r\n    // 简单的轮询实现，实际项目中可以使用 chokidar 等库\r\n    setInterval(() => {\r\n      const newContent = this.generate()\r\n      const outputPath = join(this.options.outputDir, this.options.filename)\r\n      \r\n      try {\r\n        const existingContent = require('node:fs').readFileSync(outputPath, 'utf-8')\r\n        if (existingContent !== newContent) {\r\n          this.write()\r\n        }\r\n      } catch {\r\n        // 文件不存在，写入\r\n        this.write()\r\n      }\r\n    }, 5000)\r\n  }\r\n}\r\n\r\n// ==================== 工厂函数 ====================\r\n\r\n/**\r\n * 生成路由类型\r\n */\r\nexport function generateRouteTypes(\r\n  routes: RouteRecordRaw[],\r\n  options?: TypeGeneratorOptions\r\n): RouteTypeGenerator {\r\n  const generator = new RouteTypeGenerator(routes, options)\r\n  generator.write()\r\n  return generator\r\n}\r\n\r\n// ==================== Vite 插件 ====================\r\n\r\nexport function vitePluginRouteTypes(options?: TypeGeneratorOptions) {\r\n  const routes: RouteRecordRaw[] = []\r\n  \r\n  return {\r\n    name: 'vite-plugin-route-types',\r\n    \r\n    configResolved() {\r\n      // 延迟执行，确保路由已加载\r\n      setTimeout(() => {\r\n        if (routes.length > 0) {\r\n          generateRouteTypes(routes, options)\r\n        }\r\n      }, 100)\r\n    },\r\n    \r\n    handleHotUpdate({ file }: any) {\r\n      // 监听路由文件变化\r\n      if (file.includes('routes') || file.includes('router')) {\r\n        generateRouteTypes(routes, options)\r\n      }\r\n    },\r\n  }\r\n}\r\n\r\n// ==================== Webpack 插件 ====================\r\n\r\nexport class WebpackPluginRouteTypes {\r\n  private options: TypeGeneratorOptions\r\n  \r\n  constructor(options?: TypeGeneratorOptions) {\r\n    this.options = options || {}\r\n  }\r\n  \r\n  apply(compiler: any) {\r\n    compiler.hooks.afterEmit.tap('WebpackPluginRouteTypes', () => {\r\n      // 这里需要从项目中获取路由配置\r\n      // 实际使用时需要根据项目结构调整\r\n    })\r\n  }\r\n}"],"names":["RouteTypeGenerator","constructor","routes","options","routeInfos","outputDir","filename","generateEnums","generateHelpers","watch","typePrefix","typeSuffix","prettier","parseRoutes","traverseRoutes","parentPath","route","fullPath","normalizePath","path","name","info","String","params","extractParams","query","extractQuery","meta","push","children","parent","startsWith","base","endsWith","slice","regex","match","exec","replace","Array","isArray","generate","lines","Date","toISOString","generateRouteNamesEnum","generateRouteNamesType","generateRouteParamsTypes","generateRouteQueryTypes","generateRouteMetaTypes","generateRouteMap","generateHelperFunctions","generateTypeGuards","join","enumKey","toConstantCase","names","map","length","paramType","p","queryType","q","metaFields","Set","Object","keys","forEach","key","add","field","fieldType","inferMetaFieldType","typeMap","title","icon","requiresAuth","permissions","roles","keepAlive","hidden","order","str","toUpperCase","write","content","outputPath","dir","dirname","existsSync","mkdirSync","recursive","formattedContent","format","parser","writeFileSync","console","log","setInterval","newContent","existingContent","require","readFileSync","generateRouteTypes","generator","vitePluginRouteTypes","configResolved","setTimeout","handleHotUpdate","file","includes","WebpackPluginRouteTypes","apply","compiler","hooks","afterEmit","tap"],"mappings":"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"}