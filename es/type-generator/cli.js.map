{"version":3,"file":"cli.js","sources":["../../src/type-generator/cli.ts"],"sourcesContent":["#!/usr/bin/env node\r\n/**\r\n * 路由类型生成器CLI\r\n * @module cli\r\n */\r\n\r\nimport type { RouteTypeGeneratorOptions } from './RouteTypeGenerator';\r\nimport * as fs from 'node:fs'\r\nimport * as path from 'node:path'\r\nimport { program } from 'commander'\nimport { RouteTypeGenerator } from './RouteTypeGenerator'\r\n\r\n/**\r\n * CLI配置接口\r\n */\r\ninterface CLIConfig extends RouteTypeGeneratorOptions {\r\n  configFile?: string\r\n}\r\n\r\n/**\r\n * 加载配置文件\r\n */\r\nasync function loadConfig(configPath: string): Promise<RouteTypeGeneratorOptions | null> {\r\n  const resolvedPath = path.resolve(configPath)\r\n  \r\n  if (!fs.existsSync(resolvedPath)) {\r\n    return null\r\n  }\r\n\r\n  try {\r\n    const config = await import(resolvedPath)\r\n    return config.default || config\r\n  } catch (error) {\r\n    console.error(`Failed to load config file: ${error}`)\r\n    return null\r\n  }\r\n}\r\n\r\n/**\r\n * 合并配置\r\n */\r\nfunction mergeConfig(\r\n  fileConfig: RouteTypeGeneratorOptions | null,\r\n  cliConfig: CLIConfig\r\n): RouteTypeGeneratorOptions {\r\n  const { configFile, ...cliOptions } = cliConfig\r\n  \r\n  return {\r\n    ...fileConfig,\r\n    ...Object.fromEntries(\r\n      Object.entries(cliOptions).filter(([_, value]) => value !== undefined)\r\n    )\r\n  }\r\n}\r\n\r\n// 设置CLI\r\nprogram\r\n  .name('route-type-gen')\r\n  .description('Generate TypeScript types for Vue Router routes')\r\n  .version('1.0.0')\r\n\r\n// generate 命令\r\nprogram\r\n  .command('generate')\r\n  .alias('gen')\r\n  .description('Generate route types')\r\n  .option('-r, --routes <path>', 'Path to routes file', './src/routes.ts')\r\n  .option('-o, --output-dir <path>', 'Output directory', './src/types')\r\n  .option('-f, --output-file <name>', 'Output file name', 'route-types.ts')\r\n  .option('--params', 'Generate param types', true)\r\n  .option('--no-params', 'Do not generate param types')\r\n  .option('--query', 'Generate query types', true)\r\n  .option('--no-query', 'Do not generate query types')\r\n  .option('--meta', 'Generate meta types', true)\r\n  .option('--no-meta', 'Do not generate meta types')\r\n  .option('--guards', 'Generate guard types', true)\r\n  .option('--no-guards', 'Do not generate guard types')\r\n  .option('--strict', 'Enable strict mode', false)\r\n  .option('--watch', 'Watch for changes', false)\r\n  .option('--enums', 'Generate enums', true)\r\n  .option('--no-enums', 'Do not generate enums')\r\n  .option('--unions', 'Generate union types', true)\r\n  .option('--no-unions', 'Do not generate union types')\r\n  .option('-c, --config <path>', 'Path to config file')\r\n  .action(async (options: CLIConfig) => {\r\n    try {\r\n      // 加载配置文件\r\n      let fileConfig: RouteTypeGeneratorOptions | null = null\r\n      \r\n      if (options.configFile) {\r\n        fileConfig = await loadConfig(options.configFile)\r\n        if (!fileConfig) {\r\n          console.warn(`Config file not found: ${options.configFile}`)\r\n        }\r\n      } else {\r\n        // 尝试加载默认配置文件\r\n        const defaultConfigs = [\r\n          'route-types.config.js',\r\n          'route-types.config.ts',\r\n          '.route-typesrc.js',\r\n          '.route-typesrc.json'\r\n        ]\r\n        \r\n        for (const configName of defaultConfigs) {\r\n          fileConfig = await loadConfig(configName)\r\n          if (fileConfig) {\r\n            console.log(`Using config file: ${configName}`)\r\n            break\r\n          }\r\n        }\r\n      }\r\n\r\n      // 合并配置\r\n      const finalConfig = mergeConfig(fileConfig, {\r\n        routesPath: options.routes,\r\n        outputDir: options.outputDir,\r\n        outputFileName: options.outputFile,\r\n        generateParams: options.params,\r\n        generateQuery: options.query,\r\n        generateMeta: options.meta,\r\n        generateGuards: options.guards,\r\n        strictMode: options.strict,\r\n        watch: options.watch,\r\n        generateEnums: options.enums,\r\n        generateUnions: options.unions\r\n      })\r\n\r\n      // 创建生成器\r\n      const generator = new RouteTypeGenerator(finalConfig)\r\n      \r\n      // 生成类型\r\n      await generator.generate()\r\n      \r\n      // 如果不是watch模式，生成声明文件\r\n      if (!options.watch) {\r\n        await generator.generateDeclaration()\r\n      }\r\n      \r\n      console.log('✅ Type generation completed successfully!')\r\n    } catch (error) {\r\n      console.error('❌ Type generation failed:', error)\r\n      process.exit(1)\r\n    }\r\n  })\r\n\r\n// clean 命令\r\nprogram\r\n  .command('clean')\r\n  .description('Clean generated files')\r\n  .option('-o, --output-dir <path>', 'Output directory', './src/types')\r\n  .option('-f, --output-file <name>', 'Output file name', 'route-types.ts')\r\n  .action((options) => {\r\n    try {\r\n      const generator = new RouteTypeGenerator({\r\n        outputDir: options.outputDir,\r\n        outputFileName: options.outputFile\r\n      })\r\n      \r\n      generator.clean()\r\n      console.log('✅ Clean completed successfully!')\r\n    } catch (error) {\r\n      console.error('❌ Clean failed:', error)\r\n      process.exit(1)\r\n    }\r\n  })\r\n\r\n// watch 命令\r\nprogram\r\n  .command('watch')\r\n  .description('Watch routes file and regenerate types on change')\r\n  .option('-r, --routes <path>', 'Path to routes file', './src/routes.ts')\r\n  .option('-o, --output-dir <path>', 'Output directory', './src/types')\r\n  .option('-f, --output-file <name>', 'Output file name', 'route-types.ts')\r\n  .option('-c, --config <path>', 'Path to config file')\r\n  .action(async (options: CLIConfig) => {\r\n    try {\r\n      // 加载配置\r\n      let fileConfig: RouteTypeGeneratorOptions | null = null\r\n      if (options.configFile) {\r\n        fileConfig = await loadConfig(options.configFile)\r\n      }\r\n\r\n      const finalConfig = mergeConfig(fileConfig, {\r\n        routesPath: options.routes,\r\n        outputDir: options.outputDir,\r\n        outputFileName: options.outputFile,\r\n        watch: true\r\n      })\r\n\r\n      // 创建生成器\r\n      const generator = new RouteTypeGenerator(finalConfig)\r\n      \r\n      // 生成类型并启动监听\r\n      await generator.generate()\r\n      \r\n      console.log('👀 Watching for changes... Press Ctrl+C to stop.')\r\n      \r\n      // 保持进程运行\r\n      process.on('SIGINT', () => {\r\n        generator.stopWatcher()\r\n        console.log('\\n👋 Bye!')\r\n        process.exit(0)\r\n      })\r\n    } catch (error) {\r\n      console.error('❌ Watch failed:', error)\r\n      process.exit(1)\r\n    }\r\n  })\r\n\r\n// init 命令 - 初始化配置文件\r\nprogram\r\n  .command('init')\r\n  .description('Initialize configuration file')\r\n  .option('-t, --type <type>', 'Config file type (js, ts, json)', 'js')\r\n  .action((options) => {\r\n    const configContent: Record<string, string> = {\r\n      js: `/**\r\n * 路由类型生成器配置文件\r\n * @type {import('@ldesign/router').RouteTypeGeneratorOptions}\r\n */\r\nmodule.exports = {\r\n  // 路由文件路径\r\n  routesPath: './src/routes.ts',\r\n  \r\n  // 输出目录\r\n  outputDir: './src/types',\r\n  \r\n  // 输出文件名\r\n  outputFileName: 'route-types.ts',\r\n  \r\n  // 生成选项\r\n  generateParams: true,\r\n  generateQuery: true,\r\n  generateMeta: true,\r\n  generateGuards: true,\r\n  generateEnums: true,\r\n  generateUnions: true,\r\n  \r\n  // 严格模式\r\n  strictMode: false,\r\n  \r\n  // 监听文件变化\r\n  watch: false,\r\n  \r\n  // 自定义转换器\r\n  customTransformers: [],\r\n  \r\n  // 模板配置\r\n  templates: {\r\n    // header: '// Custom header',\r\n    // footer: '// Custom footer'\r\n  }\r\n}\r\n`,\r\n      ts: `/**\r\n * 路由类型生成器配置文件\r\n */\r\nimport type { RouteTypeGeneratorOptions } from '@ldesign/router'\r\n\r\nconst config: RouteTypeGeneratorOptions = {\r\n  // 路由文件路径\r\n  routesPath: './src/routes.ts',\r\n  \r\n  // 输出目录\r\n  outputDir: './src/types',\r\n  \r\n  // 输出文件名\r\n  outputFileName: 'route-types.ts',\r\n  \r\n  // 生成选项\r\n  generateParams: true,\r\n  generateQuery: true,\r\n  generateMeta: true,\r\n  generateGuards: true,\r\n  generateEnums: true,\r\n  generateUnions: true,\r\n  \r\n  // 严格模式\r\n  strictMode: false,\r\n  \r\n  // 监听文件变化\r\n  watch: false,\r\n  \r\n  // 自定义转换器\r\n  customTransformers: [],\r\n  \r\n  // 模板配置\r\n  templates: {\r\n    // header: '// Custom header',\r\n    // footer: '// Custom footer'\r\n  }\r\n}\r\n\r\nexport default config\r\n`,\r\n      json: `{\r\n  \"routesPath\": \"./src/routes.ts\",\r\n  \"outputDir\": \"./src/types\",\r\n  \"outputFileName\": \"route-types.ts\",\r\n  \"generateParams\": true,\r\n  \"generateQuery\": true,\r\n  \"generateMeta\": true,\r\n  \"generateGuards\": true,\r\n  \"generateEnums\": true,\r\n  \"generateUnions\": true,\r\n  \"strictMode\": false,\r\n  \"watch\": false\r\n}\r\n`\r\n    }\r\n\r\n    const fileNames: Record<string, string> = {\r\n      js: 'route-types.config.js',\r\n      ts: 'route-types.config.ts',\r\n      json: '.route-typesrc.json'\r\n    }\r\n\r\n    const fileName = fileNames[options.type] || fileNames.js\r\n    const content = configContent[options.type] || configContent.js\r\n\r\n    try {\r\n      fs.writeFileSync(fileName, content, 'utf-8')\r\n      console.log(`✅ Config file created: ${fileName}`)\r\n    } catch (error) {\r\n      console.error('❌ Failed to create config file:', error)\r\n      process.exit(1)\r\n    }\r\n  })\r\n\r\n// 解析命令行参数\r\nprogram.parse(process.argv)\r\n\r\n// 如果没有提供命令，显示帮助\r\nif (!process.argv.slice(2).length) {\r\n  program.outputHelp()\r\n}"],"names":["loadConfig","configPath","resolvedPath","path","resolve","fs","existsSync","config","default","error","console","mergeConfig","fileConfig","cliConfig","configFile","cliOptions","Object","fromEntries","entries","filter","_","value","undefined","program","name","description","version","command","alias","option","action","options","warn","defaultConfigs","configName","log","finalConfig","routesPath","routes","outputDir","outputFileName","outputFile","generateParams","params","generateQuery","query","generateMeta","meta","generateGuards","guards","strictMode","strict","watch","generateEnums","enums","generateUnions","unions","generator","RouteTypeGenerator","generate","generateDeclaration","process","exit","clean","on","stopWatcher","configContent","js","ts","json","fileNames","fileName","type","content","writeFileSync","parse","argv","slice","length","outputHelp"],"mappings":"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"}