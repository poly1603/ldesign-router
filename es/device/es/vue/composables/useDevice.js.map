{"version":3,"file":"useDevice.js","sources":["../../../../../../device/es/vue/composables/useDevice.js"],"sourcesContent":["/*!\n * ***********************************\n * @ldesign/device v0.1.0          *\n * Built with rollup               *\n * Build time: 2024-10-21 14:32:55 *\n * Build mode: production          *\n * Minified: No                    *\n * ***********************************\n */\nimport { ref, readonly, computed, onMounted, onUnmounted } from 'vue';\nimport { DeviceDetector } from '../../core/DeviceDetector.js';\nexport { useBattery } from './useBattery.js';\nexport { useGeolocation } from './useGeolocation.js';\n\nfunction useDevice(options = {}) {\n  const deviceInfo = ref();\n  const deviceType = ref(\"desktop\");\n  const orientation = ref(\"landscape\");\n  let detector = null;\n  let isInitialized = false;\n  let cleanupFunctions = [];\n  const isMobile = readonly(computed(() => deviceType.value === \"mobile\"));\n  const isTablet = readonly(computed(() => deviceType.value === \"tablet\"));\n  const isDesktop = readonly(computed(() => deviceType.value === \"desktop\"));\n  const isTouchDevice = readonly(computed(() => deviceInfo.value?.features?.touch ?? false));\n  const updateDeviceInfo = (info) => {\n    if (deviceInfo.value?.type !== info.type) {\n      deviceType.value = info.type;\n    }\n    if (deviceInfo.value?.orientation !== info.orientation) {\n      orientation.value = info.orientation;\n    }\n    deviceInfo.value = info;\n  };\n  const refresh = () => {\n    if (detector && isInitialized) {\n      const currentInfo = detector.getDeviceInfo();\n      updateDeviceInfo(currentInfo);\n    }\n  };\n  const initDetector = () => {\n    if (detector || isInitialized) {\n      return;\n    }\n    try {\n      detector = new DeviceDetector(options);\n      isInitialized = true;\n      updateDeviceInfo(detector.getDeviceInfo());\n      const deviceChangeHandler = (info) => {\n        updateDeviceInfo(info);\n      };\n      const orientationChangeHandler = (newOrientation) => {\n        if (orientation.value !== newOrientation) {\n          orientation.value = newOrientation;\n        }\n      };\n      detector.on(\"deviceChange\", deviceChangeHandler);\n      detector.on(\"orientationChange\", orientationChangeHandler);\n      cleanupFunctions.push(() => detector?.off(\"deviceChange\", deviceChangeHandler), () => detector?.off(\"orientationChange\", orientationChangeHandler));\n    } catch (error) {\n      console.error(\"Failed to initialize device detector:\", error);\n      isInitialized = false;\n    }\n  };\n  const destroyDetector = async () => {\n    try {\n      cleanupFunctions.forEach((cleanup) => cleanup());\n      cleanupFunctions = [];\n      if (detector) {\n        await detector.destroy();\n        detector = null;\n      }\n      isInitialized = false;\n    } catch (error) {\n      console.error(\"Failed to destroy device detector:\", error);\n    }\n  };\n  onMounted(() => {\n    initDetector();\n  });\n  onUnmounted(() => {\n    destroyDetector();\n  });\n  return {\n    deviceType: readonly(deviceType),\n    orientation: readonly(orientation),\n    deviceInfo: readonly(deviceInfo),\n    isMobile,\n    isTablet,\n    isDesktop,\n    isTouchDevice,\n    refresh\n  };\n}\nfunction useNetwork() {\n  const networkInfo = ref(null);\n  const isOnline = ref(true);\n  const connectionType = ref(\"unknown\");\n  const isLoaded = ref(false);\n  let detector = null;\n  let networkModule = null;\n  const loadModule = async () => {\n    if (!detector) {\n      detector = new DeviceDetector();\n    }\n    try {\n      networkModule = await detector.loadModule(\"network\");\n      if (networkModule && typeof networkModule.getData === \"function\") {\n        networkInfo.value = networkModule.getData();\n        isOnline.value = networkInfo.value?.status === \"online\";\n        connectionType.value = networkInfo.value?.type || \"unknown\";\n        isLoaded.value = true;\n      }\n    } catch (error) {\n      console.warn(\"Failed to load network module:\", error);\n      throw error;\n    }\n  };\n  const unloadModule = async () => {\n    if (detector) {\n      await detector.unloadModule(\"network\");\n      networkModule = null;\n      networkInfo.value = null;\n      isLoaded.value = false;\n    }\n  };\n  const destroyNetwork = async () => {\n    if (detector) {\n      await detector.destroy();\n      detector = null;\n      networkModule = null;\n    }\n  };\n  onUnmounted(() => {\n    destroyNetwork();\n  });\n  return {\n    networkInfo: readonly(networkInfo),\n    isOnline: readonly(isOnline),\n    connectionType: readonly(connectionType),\n    isLoaded: readonly(isLoaded),\n    loadModule,\n    unloadModule\n  };\n}\n\nexport { useDevice, useNetwork };\n/*! End of @ldesign/device | Powered by @ldesign/builder */\n//# sourceMappingURL=useDevice.js.map\n"],"names":["useDevice","options","deviceInfo","ref","deviceType","orientation","detector","isInitialized","cleanupFunctions","isMobile","readonly","computed","value","isTablet","isDesktop","isTouchDevice","features","touch","updateDeviceInfo","info","type","refresh","currentInfo","getDeviceInfo","initDetector","DeviceDetector","deviceChangeHandler","orientationChangeHandler","newOrientation","on","push","off","error","console","destroyDetector","forEach","cleanup","destroy","onMounted","onUnmounted","useNetwork","networkInfo","isOnline","connectionType","isLoaded","networkModule","loadModule","getData","status","warn","unloadModule","destroyNetwork"],"mappings":"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"}